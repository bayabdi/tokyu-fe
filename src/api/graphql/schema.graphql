type BookingPlanCharge {
  id: Int!
  bookingPlanId: Int!
  bookingPlan: BookingPlan!
  stayDate: DateString!
  fixedAdditionalCharge: Int!
  fixedAdditionalChargeChild: Int!
}

type BookingPlan {
  id: Int!
  enabled: Boolean!
  title: String!
  subtitle: String
  targetBookingType: TargetBookingType!
  roomTypeId: Int!
  roomType: RoomType!
  imagePublicUrl1: String
  imagePublicUrl2: String
  description: String
  remarks: String
  question1Text: String
  question1Type: BookingPlanQuestionType
  question1Required: Boolean
  question1Select1: String
  question1Select2: String
  question1Select3: String
  question1Select4: String
  question1Select5: String
  question2Text: String
  question2Type: BookingPlanQuestionType
  question2Required: Boolean
  question2Select1: String
  question2Select2: String
  question2Select3: String
  question2Select4: String
  question2Select5: String
  question3Text: String
  question3Type: BookingPlanQuestionType
  question3Required: Boolean
  question3Select1: String
  question3Select2: String
  question3Select3: String
  question3Select4: String
  question3Select5: String
  question4Text: String
  question4Type: BookingPlanQuestionType
  question4Required: Boolean
  question4Select1: String
  question4Select2: String
  question4Select3: String
  question4Select4: String
  question4Select5: String
  question5Text: String
  question5Type: BookingPlanQuestionType
  question5Required: Boolean
  question5Select1: String
  question5Select2: String
  question5Select3: String
  question5Select4: String
  question5Select5: String
  additionalChargeType: BookingPlanAdditionalChargeType!
  fixedAdditionalCharge: Int!
  fixedAdditionalChargeChild: Int!
  stopSaleDay: Int!
  stopSaleTime: String!
  availableFromDate: DateString!
  availableToDate: DateString!
  exceptionFromDate: DateString
  exceptionToDate: DateString
  availableSunday: Boolean!
  availableMonday: Boolean!
  availableTuesday: Boolean!
  availableWednesday: Boolean!
  availableThursday: Boolean!
  availableFriday: Boolean!
  availableSaturday: Boolean!
  bookThroughDays: Int!
  webPublicFromDate: DateString!
  webPublicToDate: DateString!
  bookingFromDate: DateString!
  bookingToDate: DateString!
  guestCountLimit: Int
  roomCountLimit: Int
  discountType: BookingPlanDiscountType!
  day1Discount: Int!
  day2Discount: Int!
  day3Discount: Int!
  day4Discount: Int!
  day5Discount: Int!
  day6Discount: Int!
  day7Discount: Int!
  day8Discount: Int!
  day9Discount: Int!
  continueDiscountAfterDay9: Boolean!
  minGuestCount: Int!
  maxGuestCount: Int!
  minDays: Int!
  maxDays: Int!
  overrideCancelPolicy: Boolean!
  noShowPenalty: Float
  day0Penalty: Float
  threshold1Day: Int
  threshold1Penalty: Float
  threshold2Day: Int
  threshold2Penalty: Float
  threshold3Day: Int
  threshold3Penalty: Float
  threshold4Day: Int
  threshold4Penalty: Float
  threshold5Day: Int
  threshold5Penalty: Float
  threshold6Day: Int
  threshold6Penalty: Float
  threshold7Day: Int
  threshold7Penalty: Float
  createdByName: String!
  bookingPlanCharges: [BookingPlanCharge!]
  hasDiscount: Boolean!
}

enum TargetBookingType {
  VS
  MO
  SP
  FP
}

type RoomType {
  id: Int!
  facilityId: Int!
  facility: Facility
  name: String!
  maxOccupancy: Int!
  bedShareMaxOccupancy: Int
  backgroundColor: String
  foreColor: String
  rakutsuId: String
  order: Int!
  bookingRemarks: String
  accommodationPrices: [AccommodationPrice!]!
  rooms: [Room!]!
}

type Facility {
  id: Int!
  type: FacilityTypeEnum!
  name: String!
  nameRoma: String
  nameAbbr: String
  nameOfficial: String
  postalCode: String
  address1: String
  address2: String
  tel: String
  fax: String
  email: String
  opened: DateString
  bedShareRule: BedShareRule!
  bedShareMaxAge: Int
  floorPlanPdf: String
  spSetupFee: Int!
  mwCleaningFee: Int!
  mwFacilityFee: Int!
  mwFacilityFee12to47: Int
  mwFacilityFeeOkinawa: Boolean
  hotSpringFee: Int!
  hotSpringTax: Int!
  dpSpecial: Boolean!
  dpUtilityFee: Int!
  dpCleaningFee: Int!
  parkingReservationRequired: Boolean!
  parkingSpacesPerRoom: Int
  order: Int
  rakutsuHotelCode: String
  hotelTaxEnabled: Boolean!
  rakutsuSelectBookingIntervalMinutes: Int!
  roomTypes: [RoomType!]!
  facilityHpUrl: String
  nameWeb: String
  tags: [String!]!
  mainImageUrl: String
  otherNotes: String
  nameOnClientWeb: String!
  shortName: String!
  floorPlanPdfUrl: String
}

enum FacilityTypeEnum {
  TVS
  CNV
  PT
}

# Date string in YYYY-MM-DD format
scalar DateString

enum BedShareRule {
  Age
  School
  None
}

type AccommodationPrice {
  stayDate: DateString!
  spPoint: Int
  fpPoint: Int
  vsPrice1: Int
  vsPrice2: Int
  vsPrice3: Int
  vsPrice4: Int
  vsPrice5: Int
  vsPrice6: Int
  vsPrice7: Int
  vsPrice8: Int
  vsPrice9: Int
  vsPrice10: Int
  vmPrice1: Int
  vmPrice2: Int
  vmPrice3: Int
  vmPrice4: Int
  vmPrice5: Int
  vmPrice6: Int
  vmPrice7: Int
  vmPrice8: Int
  vmPrice9: Int
  vmPrice10: Int
  dpPrice: Int
  id: Int!
  roomTypeId: Int!
  roomType: RoomType!
  computed: AccommodationPriceComputed
}

type AccommodationPriceComputed {
  id: Int!
  roomsAvailable: Int!
}

type Room {
  id: Int!
  roomTypeId: Int!
  roomType: RoomType!
  name: String!
  order: Int!
}

enum BookingPlanQuestionType {
  Text
  Select
}

enum BookingPlanAdditionalChargeType {
  RoomStay
  PersonStay
  RoomDay
  PersonDay
}

enum BookingPlanDiscountType {
  Percent
  Fixed
}

type Query {
  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all FacilityType entity rows
  #
  facilityTypeList: [FacilityType!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated MemberUser entity rows
  #
  memberUsersSearch(
    orderBy: [OrderByInput!]
    pagination: PaginationInput!
    filter: MemberUserSearchInput
  ): MemberUserPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns Facility entity rows.
  #       Can be filtered by facility type
  #
  facilityList(filter: FacilityListFilterInput): [Facility!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns Facility entity row by id
  #
  facility(id: Int!): Facility!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns list of available room types with contract price and number of available rooms by date
  #
  bookingAvailableFacilityList(
    fromDate: DateString!
    toDate: DateString!
    contractId: Int!
    tags: [String!]
    facilityIds: [Int!]
    numberOfAdults: Int = 1
    numberOfChildren: Int = 0
    numberOfBedShare: Int = 0
  ): [BookingAvailableFacilityListResult!]!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Returns public facilities id, name and short name list
  #
  publicFacilityList: [PublicFacilityInfo!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns Room entity rows
  #
  roomList(roomTypeId: Int!): [Room!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns Room entity row by id
  #
  room(id: Int!): Room!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns RoomType entity rows by facility id
  #
  roomTypeList(facilityId: Int!): [RoomType!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns RoomType entity row by id
  #
  roomType(id: Int!): RoomType!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns VM occupancy list by year and days
  #
  vmOccupancyList(
    fromYear: Int!
    years: Int!
    roomTypeId: Int!
    fromMonth: Int!
    fromDate: Int!
    toMonth: Int!
    toDate: Int!
  ): VmOccupancyListResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns Inventory entity rows
  #
  inventoryList(
    dateTo: DateString
    dateFrom: DateString
    inventoryTypes: [Int!] = []
    roomTypes: [Int!] = []
    facilityId: Int
  ): [Inventory!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns whether inventories are available by specified arguments
  #
  areInventoriesAvailable(
    dateTo: DateString!
    dateFrom: DateString!
    inventoryTypeId: Int!
    roomTypeId: Int!
  ): InventoryAvailabilityResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated Contract entity rows
  #
  contractList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    filter: ContractListFilterInput
  ): ContractPaginatedResponse!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns paginated Contract entity rows for current client
  #
  myContractList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput!
  ): ContractPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns ContractAttachment entity row by id
  #
  contractAttachment(id: Int!): ContractAttachment!

  #
  #       [AUTH_RULE]: [StaffOrClientAuthorized]
  #       Returns sales tax, total price and price without sales tax
  #
  salesTax(
    chargeDate: DateString
    taxIncluded: Boolean = false
    salesTaxType: TaxType!
    price: Int!
  ): GetPriceAndSalesTaxResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns BookingTicket entity rows
  #
  bookingTypesList: [BookingType!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns BookingTicket entity rows for booking extension
  #
  bookingExtensionTypesList: [BookingType!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns booking price calculation result (accommodation prices by day)
  #
  calculateAccommodationPrice(
    contractId: Int
    roomTypeId: Int!
    checkInDate: DateString!
    checkOutDate: DateString!
    numberOfAdults: Int!
    numberOfChildren: Int!
    numberOfBedShare: Int!
    bookingPlanId: Int
    bookingId: Int
    bookingTypeId: Int
  ): PriceCalculationResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns AccommodationPrice entity rows by: facility id, roomType id and from and to date range
  #
  accommodationPriceList(
    toDate: String!
    fromDate: String!
    roomTypeId: Int
    facilityId: Int
  ): [AccommodationPrice!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated AccommodationPriceImport entity rows
  #
  accommodationPriceImportList(
    pagination: PaginationInput!
    includeNonScheduled: Boolean = true
  ): AccommodationPriceImportPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns AccommodationPriceHistory entity rows by room type id and date
  #
  accommodationPriceHistoryList(
    stayDate: DateString!
    roomTypeId: Int!
  ): [AccommodationPriceHistory!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns specified year and contract id's points info
  #
  getYearPointInfo(contractId: Int!, year: Int!): YearContractPointInfoResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns point summary by contract id
  #
  contractPointSummary(contractId: Int!): [ContractPointSummaryResult!]!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns point summary by contract id
  #
  myContractPointSummary(contractId: Int!): [ContractPointSummaryResult!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns ContractPointMovement entity view rows by contract id
  #
  contractPointMovementList(contractId: Int!): [ContractPointMovement!]!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns ContractPointMovement entity view rows by contract id for current client
  #
  myContractPointMovementList(contractId: Int!): [ContractPointMovement!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns ContractPoint entity rows with remaining points by contract id
  #
  contractPointList(contractId: Int!): [ContractPoint!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns available points (TVP and contract points) by client id
  #
  availablePoints(clientId: Int!): MyAvailablePointsResult!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns available points (TVP and contract points) for current client
  #
  myAvailablePoints: MyAvailablePointsResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated ClientComment entity rows. Can be filtered by client id
  #
  paginateClientComment(
    pagination: PaginationInput!
    clientId: Int!
  ): ClientCommentPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated ClientCommentMention entity rows
  #
  clientCommentMentionList(
    pagination: PaginationInput!
    mentionedStaffId: Int!
  ): ClientCommentMentionPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all RentalItemDef entity rows
  #
  rentalItemDefList: [RentalItemDef!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns RentalItemDef entity row by id
  #
  rentalItemDef(id: Int!): RentalItemDef!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns MwRight entity rows. Can be filtered by contract id, whether can be deposited and exchanged
  #
  mwRights(
    canExchange: Boolean = false
    canDeposit: Boolean = false
    contractId: Int
  ): [MwRight!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Calculates and returns booking cancellation penalties for the current booking id
  #
  calculateBookingCancelPenalty(
    stayDates: [DateString!] = []
    bookingId: Int!
  ): BookingCancellationPenaltiesCalculationResult!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Calculates booking cancel penalties by booking id and stay dates and returns cancel booking penalty rates
  #
  calculateMyBookingCancelPenalty(
    stayDates: [DateString!] = []
    bookingId: Int!
  ): BookingCancellationPenaltiesCalculationResult!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns booking cancel policy by contract id check in date and booking plan id
  #
  myCancelPolicy(
    contractId: Int!
    checkInDate: DateString!
    bookingPlanId: Int
  ): CancelPolicyResult!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Returns booking cancel policy by booking id and code
  #
  bookingCancelPolicy(bookingId: Int!, code: String!): CancelPolicyResult!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Returns Holiday entity rows by specified date range
  #
  holidays(to: DateString!, from: DateString!): [Holiday!]!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Returns boolean whether specified date is holiday or not
  #
  isHoliday(date: DateString!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns booking extension prices by booking id, inventory type id and stay days
  #
  checkPriceForBookingExtension(
    bookingId: Int!
    days: [BookingExtendDayInput!]!
  ): CheckBookingExtensionPriceResult!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns self booked booking extension prices by booking id and stay days
  #
  checkPriceForMyBookingExtension(
    bookingId: Int!
    days: [DateString!]!
  ): CheckBookingExtensionPriceResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all StaffRole entity rows
  #
  staffRoleList: [StaffRole!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns StaffRole entity row by id
  #
  staffRole(id: Int!): StaffRole!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns recorded income data
  #
  getRecordedIncomeFacilityDay(
    data: GetRecordedIncomeInput
    reportId: Int
  ): RecordedIncomeFacilityDayResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns FacilityDailyReportDetailAttachment entity rows' attachment url
  #
  downloadFacilityDailyReportAttachmentFile(
    data: DownloadFileFacilityDailyReportInput!
  ): DownloadAttachmentFacilityDailyReportResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated FacilityDailyReport entity rows
  #
  facilityDailyReportList(
    pagination: PaginationInput
    facilityId: Int
  ): FacilityDailyReportPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns the next report date to submit
  #
  nextDailyReportDate(facilityId: Int!): NextDailyReportDateResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns BookingAdditionalCharge entity rows by booking group id
  #
  bookingGroupListCharges(bookingGroupId: Int!): [BookingAdditionalCharge!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns BookingAdditionalCharge entity rows
  #
  bookingAdditionalChargeTypeList: [BookingAdditionalChargeType!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns BookingAdditionalChargeSubject entity rows
  #
  bookingAdditionalChargeSubjectList(
    typeId: Int
  ): [BookingAdditionalChargeSubject!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns default price and whether price change is allowed by subject id
  #
  chargeDefault(stayDate: DateString!, subjectId: Int!): ChargeDefault!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns RentalItem entity rows by facility id
  #
  rentalItemList(facilityId: Int!): [RentalItem!]!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns RentalItemDef entity row and its available rental items with date and quantity.
  #       Should be filtered by facility id, and check in and check out date ranges
  #
  clientRentalItemList(
    checkOutDate: DateString!
    checkInDate: DateString!
    facilityId: Int!
  ): [AvailableRentalItemsResponse!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns SaleItem entity rows
  #
  saleItemList(
    includeNotUpdatable: Boolean = false
    includeNotForSale: Boolean = false
  ): [SaleItem!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns Staff entity rows
  #
  staffList(crmRep: Boolean, showDisabled: Boolean = false): [Staff!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated Staff rows. Can be filtered by name, email and staff role id
  #
  staffSearch(
    orderBy: [OrderByInput!]
    pagination: PaginationInput!
    filter: StaffSearchInput
  ): StaffPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns Staff entity row by id
  #
  staff(id: Int!): Staff!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all StaffRolePermission entity rows
  #
  staffRolePermissionList: [StaffRolePermission!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns FacilityParking entity rows by facility id
  #
  facilityParkingList(facilityId: Int!): [FacilityParking!]!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns facility parkings availability data such as date and quantity
  #
  clientFacilityParkingList(
    checkOutDate: DateString!
    checkInDate: DateString!
    facilityId: Int!
  ): [AvailableFacilityParkingItemsResponse!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns FacilityBookingRemarks entity rows by facility id
  #
  facilityBookingRemarksList(facilityId: Int!): [FacilityBookingRemarks!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns InventoryType entity rows
  #
  inventoryTypeList(onlyExternallyReserved: Boolean = false): [InventoryType!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns BookingAccommodationPrice entity rows. Can be filtered by facility id, room type ids, inventory type ids, date from and date to
  #
  bookingAccommodationPriceList(
    dateTo: DateString!
    dateFrom: DateString!
    inventoryTypes: [Int!] = []
    roomTypes: [Int!] = []
    facilityId: Int
  ): [BookingAccommodationPrice!]!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Returns SignupBonus entity type, promo discount and promo TVP
  #
  validateVsPromoCodeSignupBonus(promoCode: String!): ValidateVsPromoCodeResult!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Returns base fee, promo discount and total of SignupBonus entity row by promo code
  #
  getVsAnnualFee(promoCode: String): GetVsAnnualFeeResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns MwWeekCalendar entity rows by specified date range. Can be filtered by facility id
  #
  mwWeekCalendarList(
    toDate: DateString = "3000-12-31"
    fromDate: DateString = "1900-01-01"
    facilityId: Int
  ): [MwWeekCalendar!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns NonProductPrice entity rows.
  #       Can be filtered by facility id, room type id, non product id and specified date range
  #
  nonProductPriceList(
    toDate: DateString!
    fromDate: DateString!
    nonProductId: Int
    roomTypeId: Int
    facilityId: Int
  ): [NonProductPrice!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all NonProduct entity rows
  #
  nonProductList: [NonProduct!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated BookingPlan entity rows. Can be filtered by facility id, room type id and available date range
  #
  bookingPlanList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    filter: BookingPlanListFilterInput!
  ): BookingPlanPaginatedResponse!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns available BookingPlan entity rows. Can be filtered by room type id, contract id, number of guests and stay date range
  #
  availableBookingPlanList(
    filter: AvailableBookingPlanListFilterInput!
  ): AvailableBookingPlanItemsResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns Booking entity row by id
  #
  booking(id: Int!): Booking!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated Booking entity rows. Can be filtered by some fields
  #
  bookingList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    filter: BookingListFilterInput
  ): BookingPaginatedResponse!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns paginated self booked Booking entity rows. Can be filtered by specified fields
  #
  myBookingList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    filter: MyBookingListFilterInput
  ): BookingPaginatedResponse!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns self booked Booking entity row by id
  #
  myBooking(id: Int!): Booking!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Returns Booking entity row by id and code
  #
  myBookingNonLogin(code: String!, id: Int!): Booking!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated Booking entity rows. Can be filtered by keyword
  #
  bookingKeywordSearch(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    filter: BookingSearchKeywordFilterInput!
  ): BookingKeywordSearchPaginatedResponse!
  getContractPointComputedTest: [ContractPoint!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns ClientActionHistory entity by id
  #
  getClientActionHistory(id: Int!): ClientActionHistory!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated ClientActionHistory entity rows
  #
  clientActionHistoryList(
    pagination: PaginationInput
    data: ListClientActionHistoryInput
  ): ClientActionHistoryPaginatedResponse!

  #
  #       Returns all OtherPublicDocType entity rows
  #
  otherPublicDocTypeList: [OtherPublicDocType!]!

  #
  #       [AUTH_RULE]: [StaffOrClientAuthorized]
  #       Returns list of all OtherPublicDoc entity rows
  #
  otherPublicDocList: [OtherPublicDoc!]!

  #
  #       [AUTH_RULE]: [StaffOrClientAuthorized]
  #       Returns all UserGuide entity rows
  #
  userGuideList: [UserGuide!]!

  #
  #       [AUTH_RULE]: [StaffOrClientAuthorized]
  #       Returns all VacationLife entity rows
  #
  vacationLifeList: [VacationLife!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated ClientAnnualFee entity rows by specified filters
  #
  clientAnnualFeeList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    filter: ClientAnnualFeeListFilterInput!
  ): ClientAnnualFeePaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all BookingAdditionalChargeType entity rows
  #
  enumBookingAdditionalChargeTypeList: [BookingAdditionalChargeType!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all BookingPaymentMethod entity rows
  #
  enumBookingPaymentMethodList: [BookingPaymentMethod!]!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Returns all BusinessType entity rows
  #
  enumBusinessTypeList: [BusinessType!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all CampaignMediaType entity rows
  #
  enumCampaignMediaTypeList: [CampaignMediaType!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all ClientActionType entity rows
  #
  enumClientActionTypeList: [ClientActionType!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all ClientChargeType entity rows
  #
  enumClientChargeTypeList: [ClientChargeType!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all ClientChildType entity rows
  #
  enumClientChildTypeList: [ClientChildType!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all CompanyMemberBookingPaymentPref entity rows
  #
  enumCompanyMemberBookingPaymentPrefList: [CompanyMemberBookingPaymentPref!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all ContractApplicationType entity rows
  #
  enumContractApplicationTypeList: [ContractApplicationType!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all ContractPhase entity rows
  #
  enumContractPhaseList: [ContractPhase!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all ContractPurchasePaymentMethod entity rows
  #
  enumContractPurchasePaymentMethodList: [ContractPurchasePaymentMethod!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all ContractPurchasePurpose entity rows
  #
  enumContractPurchasePurposeList: [ContractPurchasePurpose!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all ContractPurchaseReason entity rows
  #
  enumContractPurchaseReasonList: [ContractPurchaseReason!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all ContractPurchaseType entity rows
  #
  enumContractPurchaseTypeList: [ContractPurchaseType!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all ContractPurchaseTypeDetail entity rows
  #
  enumContractPurchaseTypeDetailList: [ContractPurchaseTypeDetail!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all EmploymentType entity rows
  #
  enumEmploymentTypeList: [EmploymentType!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all NegotiationExitReason entity rows
  #
  enumNegotiationExitReasonList: [NegotiationExitReason!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all NonProduct entity rows
  #
  enumNonProductList: [NonProduct!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all ParkingType entity rows
  #
  enumParkingTypeList: [ParkingType!]!

  #
  #       [AUTH_RULE]: [StaffOrClientAuthorized]
  #       Returns all PersonRelationship entity rows
  #
  enumPersonRelationshipList: [PersonRelationship!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all ProductType entity rows
  #
  enumProductTypeList: [ProductType!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all PurchaseRate entity rows
  #
  enumPurchaseRateList: [PurchaseRate!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all ReceiptType entity rows
  #
  enumReceiptTypeList: [ReceiptType!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all RentalItemDef entity rows
  #
  enumRentalItemDefList: [RentalItemDef!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all ResponseSource entity rows
  #
  enumResponseSourceList: [ResponseSource!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all SubMemberType entity rows
  #
  enumSubMemberTypeList: [SubMemberType!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all IncomeLevel entity rows
  #
  enumIncomeLevelList: [IncomeLevel!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all ClientActionMethod entity rows
  #
  enumClientActionMethodList: [ClientActionMethod!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all groups field list from Campaign entity rows
  #
  enumCampaignGroupList: [NameOnlyEnumResponse!]!

  #
  #       [AUTH_RULE]: [StaffOrClientAuthorized]
  #       Returns all tags field list from Facility entity rows
  #
  enumFacilitySearchTagList: [NameOnlyEnumResponse!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all SeasonInterest entity rows
  #
  enumSeasonInterestList: [SeasonInterest!]!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Returns all Prefecture entity rows
  #
  enumPrefectureList: [Prefecture!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all ParticipantType entity rows
  #
  enumParticipantTypeList: [ParticipantType!]!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Returns all FacilityInterested entity rows
  #
  facilityInterestedList: [FacilityInterested!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns Client entity row by id or member id
  #
  getClientByIdOrMemberId(id: String!): Client!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns Client entity row by id with additional client data
  #
  clientBasicInfo(id: Int!): Client!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns Client entity row by id
  #
  clientMemberInfo(id: Int!): Client!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns Client entity row by id
  #
  myClientInfo: Client!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns current client's info such as name, email, tel and mobile
  #
  myUserInfo: MyUserInfoDefault!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns the URL of the generated files associated with a customer label
  #
  customerLabelPdf(startIndex: Int, clientIds: [Int!]!): CsvReportResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated FacilityParkingReservation entity rows
  #
  parkingReservationList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    filter: ListFacilityParkingReservationFilterInput
  ): FacilityParkingReservationPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated RentalItemReservation entity rows. Can be filtered by facility id, date from and date to ranges
  #
  rentalItemReservationList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    filter: ListRentalItemReservationFilterInput
  ): RentalItemReservationPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns BookingInvoice entity row by id
  #
  bookingInvoice(id: Int!): BookingInvoice!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns BookingInvoice entity rows by booking group id
  #
  bookingInvoiceList(bookingGroupId: Int!): [BookingInvoice!]!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns BookingInvoice entity row by id
  #
  myBookingInvoice(id: Int!): BookingInvoice!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns paginated BookingInvoice entity rows by booking or booking group id
  #
  myBookingInvoiceList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    filter: ClientBookingInvoiceListFilterInput
  ): BookingInvoicePaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns BookingChangeHistory entity rows by booking id
  #
  bookingChangeHistoryList(bookingId: Int!): [BookingChangeHistory!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns WebNotification entity row by id
  #
  getWebNotification(id: Int!): WebNotification!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated WebNotification entity rows. Can be filtered by published, include hidden, in range attributes
  #
  webNotificationList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    filter: ListWebNotificationInput
  ): WebNotificationPaginatedResponse!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns paginated WebNotification entity rows for current client
  #
  myWebNotificationList(
    pagination: PaginationInput!
    important: Boolean
  ): WebNotificationPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated FacilityParkingCancelWaitlist entity rows
  #
  facilityParkingCancelWaitlistList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    filter: FacilityParkingCancelWaitListFilterInput!
  ): FacilityParkingCancelWaitlistPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns FacilityParkingCancelWaitlist entity rows count list of date and count
  #
  facilityParkingCancelWaitlistCountList(
    filter: FacilityParkingCancelWaitListCountFilterInput!
  ): [FacilityParkingCancelWaitlistCountResponse!]!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns paginated FacilityParkingCancelWaitlist entity rows of current client
  #
  myFacilityParkingCancelWaitlistList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    filter: FacilityParkingCancelWaitListFilterInput!
  ): FacilityParkingCancelWaitlistPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns BookingTicketType entity row by id
  #
  bookingTicketType(id: String!): BookingTicketType!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated BookingTicketType entity rows
  #
  bookingTicketTypeList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    filter: BookingTicketTypeListFilterInput
  ): BookingTicketTypePaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated list of Client entity rows
  #
  searchClientList(
    load: ClientSearchLoadInput
    orderBy: [OrderByInput!]
    pagination: PaginationInput!
    filter: ClientFilterSearchInput!
  ): ClientSearchPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated Campaign entity rows. Can be filtered by keyword, date range, whether finished and has attachment
  #
  campaignList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    filter: ListCampaignFilterInput
  ): CampaignPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns Campaign entity row by id. Can be appended data for campaign apply response and contract
  #
  campaign(load: GetCampaignLoadInput, id: Int!): Campaign!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns facility revenue report for facility id and the specified date range
  #
  facilityRevenueReport(
    fromDate: DateString!
    toDate: DateString!
    facilityId: Int!
  ): FacilityRevenueReportOutput!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns the URL of the generated files associated with a facility revenue report
  #
  facilityRevenueReportPdf(
    fromDate: DateString!
    toDate: DateString!
    facilityId: Int!
  ): CsvReportResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns monthly revenue report by facility. Year and month should be specified
  #
  monthlyRevenueSummaries(year: Int!, month: Int!): [MonthlyRevenueSummary!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated ClientChangeHistory entity rows. Can be filtered by client id and field name
  #
  clientChangeHistoryList(
    pagination: PaginationInput
    filter: ClientChangeHistoryListFilterInput
  ): ClientChangeHistoryPaginatedResponse!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns current authorized client's paginated ClientCharge entity rows
  #
  myClientChargeList(
    pagination: PaginationInput!
  ): MyClientChargePaginatedResponse!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns all SubMember entity rows that belong to current client
  #
  mySubMemberList: [SubMember!]!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns SubMember entity row by id that belongs to current client
  #
  mySubMember(id: Int!): SubMember!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns paginated PointExchange entity rows for current client
  #
  myPointExchangeList(
    pagination: PaginationInput
  ): PointExchangePaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated PointExchange entity rows. Can be filtered by client id
  #
  pointExchangeList(
    pagination: PaginationInput
    filter: PointExchangeListFilterInput
  ): PointExchangePaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns Contract entity row by id
  #
  contract(id: Int!): Contract!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns PW contract usage rights (years, BookingGroup entity and validity) by contract id
  #
  pwContractUsage(contractId: Int!): PwContractUsageResult!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns PW contract usage rights belonging to current client (years, BookingGroup entity and validity) by contract id
  #
  myPwContractUsage(contractId: Int!): PwContractUsageResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns MW contract usage result (rights and stay right price per day)
  #
  mwContractUsage(contractId: Int!): MwContractUsageResult!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns MW contract usage result (rights and stay right price per day) for current client
  #
  myMwContractUsage(contractId: Int!): MwContractUsageResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns VM contract usage result (year, BookingGroup entity row, VmStayRight entity rows by year) by contract id
  #
  vmContractUsage(contractId: Int!): VmContractUsageResult!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns VM contract usage result (year, BookingGroup entity row, VmStayRight entity rows by year) by contract id for current client
  #
  myVmContractUsage(contractId: Int!): VmContractUsageResult!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns Contract entity row by id for current client
  #
  myContract(id: Int!): Contract!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns Contract entity row by id for current client
  #
  myVsContract: Contract!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated TVPHistory entity rows
  #
  tvpHistoryList(
    pagination: PaginationInput
    clientId: Int!
  ): TVPHistoryPaginatedResponse!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns paginated TVPHistory entity rows that belong to current client
  #
  myTvpHistoryList(pagination: PaginationInput!): TVPHistoryPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated CancelWaitList entity rows. Can be filtered client id and whether in effect
  #
  cancelWaitListList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    filter: CancelWaitListFilterInput!
  ): CancelWaitListPaginatedResponse!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns paginated self created CancelWaitList entity rows. Can be filtered as whether in effect or not
  #
  myCancelWaitList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    inEffect: Boolean!
  ): MyCancelWaitListPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns CancelWaitList entity row's counts by stay date rows
  #
  cancelWaitlistCountList(
    filter: CancelWaitListCountFilterInput!
  ): [CancelWaitlistCountResponse!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns CampaignApplyResponse entity row by id
  #
  campaignApplyResponse(id: Int!): CampaignApplyResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated CampaignApplyResponse entity rows. Can be filtered by client id
  #
  campaignApplyResponseList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    filter: CampaignApplyResponseListFilterInput
  ): CampaignApplyResponsePaginatedResponse!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns all PointExchangeProduct entity rows
  #
  clientPointExchangeProductList: [PointExchangeProduct!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all PointExchangeProduct entity rows
  #
  pointExchangeProductList: [PointExchangeProduct!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated ClientCharge entity rows. Can be filtered by client id
  #
  clientChargeList(
    pagination: PaginationInput!
    filter: ClientChargeListFilterInput!
  ): ClientChargePaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated SignupBonusApplication entity rows
  #
  signupBonusApplicationList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    filter: ListSignupBonusApplicationFilterInput
  ): SignupBonusApplicationPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated SignupBonus entity rows
  #
  signupBonusList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    filter: SignupBonusListFilterInput
  ): SignupBonusPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns SignupBonus entity row by id
  #
  signupBonus(id: Int!): SignupBonus!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns Receipt entity row by id
  #
  receipt(id: Int!): Receipt!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns Receipt entity row by id for current client
  #
  myReceipt(id: Int!): Receipt!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Saves the card of a client to RegisteredCC table.
  #       Returns saved card RegisteredCC entity row
  #
  mySavedCard: RegisteredCC!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated WebRequest entity rows.
  #       Can be filtered by client id, web request type, keyword, neither for VS or VM, has pic, assigned to the client handled
  #
  webRequestList(
    orderBy: [OrderByInput!]
    pagination: PaginationInput
    filter: WebRequestListFilterInput
  ): WebRequestPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns WebRequest entity row by id
  #
  webRequest(id: Int!): WebRequest!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all StaffGroup entity rows
  #
  staffGroupList: [StaffGroup!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns possibly duplicated Client entity rows
  #
  possiblyDuplicatedClientList(data: PossiblyDuplicatedClientInput!): [Client!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns duplicated Client entity rows pagination
  #
  duplicatedClientList(
    pagination: PaginationInput
  ): DuplicatedClientPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns FacilityHotelTax report with amount and count by day.
  #       Should be filtered by year, month and facility id
  #
  hotelTaxReport(
    facilityId: Int!
    month: Int!
    year: Int!
  ): FacilityHotelTaxReportResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns all EmailTemplate entity rows
  #
  emailTemplateList: [EmailTemplate!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns EmailTemplate entity row by key
  #
  emailTemplate(key: String!): EmailTemplate!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns BookingGroup entity row by id
  #
  bookingGroup(id: Int!): BookingGroup!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns BookingGroup entity row by booking id
  #
  bookingGroupByBookingId(bookingId: Int!): BookingGroup!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns paginated MW expiring rights list with contract id, text, and expiring date for current client
  #
  myExpiringRights: MyExpiringRightsResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated MwRightExpired entity view rows.
  #       Should be filtered by year and month
  #
  expiringMwRights(
    pagination: PaginationInput
    filter: ExpiringMwRightsFilterInput!
  ): MwRightPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns paginated ContractPoint entity rows.
  #       Should be filtered by year month and product type id
  #
  expiringContractPoints(
    pagination: PaginationInput
    filter: ExpiringContractPointsFilterInput!
  ): ContractPointPaginatedResponse!

  #
  #       [AUTH_RULE]: [StaffOrClientAuthorized]
  #       Returns total price, sales tax and price without sales tax for the current date
  #
  defaultRolloverFee: GetPriceAndSalesTaxResult!
}

type FacilityType {
  id: Int!
  name: String!
}

type MemberUserPaginatedResponse {
  items: [MemberUser!]!
  total: Int!
  hasMore: Boolean!
}

type MemberUser {
  id: Int!
  clientId: Int!
  client: Client!
  subMemberId: Int
  subMember: SubMember
  email: String!
  status: MemberUserStatus!
  disabled: Boolean!
  createdUserId: Int
}

type Client {
  id: Int!
  isCompany: Boolean!
  companyName: String
  companyNameKana: String
  companyRepresentativeName: String
  companyRepresentativeKana: String
  companyPicName: String
  companyPicKana: String
  companyPicDepartment: String
  companyPicTitle: String
  lastName: String
  lastKana: String
  lastNameRoma: String
  firstName: String
  firstKana: String
  firstNameRoma: String
  sex: Gender
  birthday: DateString
  income: Int
  employmentTypeId: Int
  employmentType: EmploymentType
  employerName: String
  employerKana: String
  businessTypeId: Int
  businessType: BusinessType
  businessTypeOther: String
  businessEst: DateString
  area: String
  mailPreference: ClientContactType
  telPreference: ClientContactType
  tokyuGroupId: Int
  tokyuGroup: TokyuGroup
  picId: Int
  pic: Staff
  referralCode: String!
  usedReferralCode: String
  firstAccessDate: DateString
  remarks: String
  claimer: Boolean!
  memberId: String
  membershipStarted: DateString
  membershipFee: Int
  membershipChargeMonth: Int
  topCardNumber: String
  topMember: Boolean!
  emailMagazine: Boolean
  memberRemarks: String
  memberCardIssued: DateTimeIso
  requestMail: Boolean
  memberDisabled: DateTimeIso
  frozenAt: DateTimeIso
  frozenReason: String
  facilityFeePayment: FeePaymentType
  setupFeePayment: FeePaymentType
  optionalCleaningPayment: FeePaymentType
  taxPayment: FeePaymentType
  otherServicePayment: FeePaymentType
  duplicated: Boolean!
  email: String
  companySize: Int
  lastResponseDate: DateString
  type: ClientType!
  seasonsInterested: [String!]
  facilitiesInterested: [String!]
  purchaseRateId: Int
  purchaseRate: PurchaseRate
  furtherPurchaseRateId: Int
  furtherPurchaseRate: PurchaseRate
  renewPurchaseRateId: Int
  renewPurchaseRate: PurchaseRate
  negotiationExitReason: String
  contracts: [Contract!]
  subMembers: [SubMember!]
  contacts: [ClientContact!]
  mainContact: ClientContact
  gmoRegistered: Boolean!
  spFirstDate: DateString
  spPointPrice: Int
  firstContactAge: Int
  incomeLevelId: Int
  incomeLevel: IncomeLevel
  remarksForStaff: String
  tbosClientId: Int
  referrerClientId: Int
  referrerClient: Client
  referrerGroupEmployeeName: String
  membershipCancellationDate: DateString
  membershipCancellationReason: String
  doNotContact: Boolean!
  lastMeetDate: DateString
  lastMeetMethod: String
  lastMeetAttendant: String
  requestMemberMagazineMail: Boolean!
  requestBrochureMail: Boolean!
  childTypeId: Int
  childType: ClientChildType
  createdAt: DateTimeIso!
  name: String!
  nameKana: String!
  campaignApplyResponses: [CampaignApplyResponse!]
  clientActionHistories: [ClientActionHistory!]
  directBookings: [Booking!]
  lastBooking: Booking
  lastCampaignApplyResponse: CampaignApplyResponse
  lastClientActionHistory: ClientActionHistory
  memberUser: MemberUser
  registeredCC: RegisteredCC
  age: Int
}

enum Gender {
  Male
  Female
  Other
}

type EmploymentType {
  id: Int!
  name: String!
}

type BusinessType {
  id: Int!
  name: String!
}

enum ClientContactType {
  HomeOrAddress
  WorkplaceOrNotary
  Contact
  Other
}

type TokyuGroup {
  id: Int!
  name: String!
}

type Staff {
  id: Int!
  roleId: Int!
  role: StaffRole!
  name: String!
  nameAbbr: String
  mentionName: String!
  departmentId: Int
  department: Department!
  allowPms: Boolean!
  allowCrm: Boolean!
  facilityId: Int
  facility: Facility
  email: String!
  status: StaffStatus!
  lastLoginAt: DateTimeIso
  crmRep: Boolean!
  profileImgUrl: String
  disabled: Boolean!
  groups: [StaffGroup!]!
  crmComputed: StaffCrmComputed!
  nextAction: ClientActionHistory
}

type StaffRole {
  id: Int!
  name: String!
  readPermissions: [StaffRolePermission!]!
  writePermissions: [StaffRolePermission!]!
}

type StaffRolePermission {
  id: Int!
  key: String!
}

type Department {
  id: Int!
  name: String!
}

enum StaffStatus {
  Confirmed
  ForceChangePassword
  Unconfirmed
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTimeIso

type StaffGroup {
  id: Int
  name: String!
  staffs: [Staff!]
}

type StaffCrmComputed {
  id: Int!
  clientCount: Int!
  contractingCount: Int!
  goodCount: Int!
  coolCount: Int!
}

type ClientActionHistory {
  id: Int!
  clientId: Int!
  client: Client!
  staffId: Int
  staff: Staff
  actionAt: DateString
  actionMethodId: Int
  actionMethod: ClientActionMethod
  participants: [String!]!
  isComplaint: Boolean!
  remarks: String
  actionPlannedAt: DateTimeIso
  priority: Int
  action: String
  clientActionTypeId: Int
  clientActionType: ClientActionType
  purchaseRateId: Int
  purchaseRate: PurchaseRate
  furtherPurchaseRateId: Int
  furtherPurchaseRate: PurchaseRate
  renewPurchaseRateId: Int
  renewPurchaseRate: PurchaseRate
  negotiationExitReason: String
  purchaseRateBeforeId: Int
  purchaseRateBefore: PurchaseRate
  furtherPurchaseRateBeforeId: Int
  furtherPurchaseRateBefore: PurchaseRate
  renewPurchaseRateBeforeId: Int
  renewPurchaseRateBefore: PurchaseRate
  kujiraCrmUrl: String
}

type ClientActionMethod {
  id: Int!
  name: String!
  isFaceToFace: Boolean!
}

type ClientActionType {
  id: Int!
  name: String!
}

type PurchaseRate {
  id: Int!
  name: String!
}

enum FeePaymentType {
  Onsite
  RegisteredCC
}

enum ClientType {
  MEMBER
  TENTATIVE
  VSINTEREST
}

type Contract {
  id: Int!
  contractNumber: String
  clientId: Int!
  client: Client!
  productTypeId: Int!
  productType: ProductType!
  startDate: DateString
  endDate: DateString
  years: Int
  autoRenewal: Boolean
  basePoint: Int
  pointPrice: Int
  additionalPointPrice: Int
  mwExchangeFee: Int
  terminatedAt: DateTimeIso
  terminateReason: TerminateReason
  suspendedAt: DateTimeIso
  mwPwWeekNumber: Int
  mwPwRoomTypeId: Int
  mwPwRoomType: RoomType
  vmRoomTypeId: Int
  vmRoomType: RoomType
  vmTotalPrice: Int
  vmTotalPriceTvp: Int
  mwRank: MwRank
  startYear: Int
  pwSpContractId: Int
  pwSpContract: Contract
  campaignId: Int
  campaign: Campaign
  spFirstDate: DateString
  tentative: Boolean!
  loginAllowedDate: DateString
  vsFirstAnnualFeeDiscount: Int
  phaseId: Int
  phase: ContractPhase
  remarks: String
  responseSource: String
  contractPurchaseTypeId: Int
  contractPurchaseType: ContractPurchaseType
  contractPurchaseTypeDetailId: Int
  contractPurchaseTypeDetail: ContractPurchaseTypeDetail
  salesStaffId: Int
  salesStaff: Staff
  purchaseReason: String
  mainPurchasePurposeId: Int
  mainPurchasePurpose: ContractPurchasePurpose
  subPurchasePurposeId: Int
  subPurchasePurpose: ContractPurchasePurpose
  applicationDate: DateString
  applicationTypeId: Int
  applicationType: ContractApplicationType
  paymentExpectedDate: DateString
  paymentDate: DateString
  entranceFee: Int
  entranceFeeTax: Int
  memberRegistrationFee: Int
  memberRegistrationFeeTax: Int
  annualFee: Int
  annualFeeTax: Int
  managementFee: Int
  managementFeeTax: Int
  hotspringFee: Int
  hotspringFeeTax: Int
  paymentTotal: Int
  paymentTotalWithTax: Int
  paymentTotalTax: Int
  entranceFeeDiscount: Int
  entranceFeeDiscountTax: Int
  purchasePaymentMethodId: Int
  purchasePaymentMethod: ContractPurchasePaymentMethod
  receivedPayment: Int
  receivedPaymentDifference: Int
  accountingCheck: String
  totalPoint: Int
  transferredToContractId: Int
  transferredToContract: Contract
  expirationProcessedAt: DateTimeIso
  createdAt: DateTimeIso!
  deletedAt: DateTimeIso
  contractPoints: [ContractPoint!]!
  mwRights: [MwRight!]!
  attachments: [ContractAttachment!]!
  canCheckInUntil: DateString
  canCheckOutUntil: DateString
  status: String!
  pointSummary: [ContractPointSummaryResult!]!
  pointMovementList: [ContractPointMovement!]!
  vmStayRightDate: VmStayRightDate
  defaultMwExchangeFee: Int
  mwUsageRights(fromDate: DateString): [MwContractUsageYear!]!
  canCancelAutoRenewal: Boolean!
}

type ProductType {
  id: Int!
  code: String!
  name: String!
}

enum TerminateReason {
  Terminate
  Recreate
  Transfer
}

enum MwRank {
  A
  B
  C
}

type Campaign {
  id: Int!
  status: CampaignStatus!
  name: String!
  groups: [String!]!
  mediaTypes: [CampaignMediaType!]!
  startDate: DateString!
  endDate: DateString!
  budget: Int!
  target20s: Boolean!
  target30s: Boolean!
  target40s: Boolean!
  target50s: Boolean!
  target60s: Boolean!
  target70s: Boolean!
  targetMale: Boolean!
  targetFemale: Boolean!
  purposeRecognition: Boolean!
  purposePersuade: Boolean!
  purposePromote: Boolean!
  methodDm: Boolean!
  methodEmail: Boolean!
  methodBillboard: Boolean!
  methodTv: Boolean!
  methodSns: Boolean!
  methodWeb: Boolean!
  attachment1: String
  attachment2: String
  attachment3: String
  note: String
  createdAt: DateTimeIso!
  computed: CampaignComputed
  detailComputed: CampaignDetailComputed
  applyResponses: [CampaignApplyResponse!]
  contracts: [Contract!]
  attachment1Url: String
  attachment2Url: String
  attachment3Url: String
}

enum CampaignStatus {
  Active
  Ended
}

type CampaignMediaType {
  id: Int!
  name: String!
}

type CampaignComputed {
  id: Int!
  responseCount: Int!
  contractCount: Int!
}

type CampaignDetailComputed {
  id: Int!
  newClientCount: Int!
  vsContractCount: Int!
  vmContractCount: Int!
  paymentTotal: Int!
}

type CampaignApplyResponse {
  id: Int!
  campaignId: Int!
  campaign: Campaign!
  clientId: Int!
  client: Client!
  responseAt: DateTimeIso
  webRequestId: Int
  webRequest: WebRequest
  createdAt: DateTimeIso!
}

type WebRequest {
  id: Int!
  type: WebRequestType!
  memberId: String
  clientId: Int
  client: Client
  handledAt: DateTimeIso
  handledById: Int
  handledBy: Staff
  forVm: Boolean
  forVs: Boolean
  isCompany: Boolean!
  companyName: String
  companyNameKana: String
  companyPicDepartment: String
  companyPicTitle: String
  companyPicName: String
  companyPicKana: String
  lastName: String
  lastKana: String
  firstName: String
  firstKana: String
  sex: Gender
  birthday: DateString
  tel: String
  telMobile: String
  email: String
  businessTypeId: Int
  businessType: BusinessType
  businessTypeOther: String
  postalCode: String
  prefecture: String
  locality: String
  address1: String
  address2: String
  firstDate: DateString
  firstTime: String
  secondDate: DateString
  secondTime: String
  otherDateTime: String
  inquiry: String
  firstCheckInDate: DateString
  firstStayDays: Int
  firstFacilityId: Int
  firstFacility: Facility
  secondCheckInDate: DateString
  secondStayDays: Int
  secondFacilityId: Int
  secondFacility: Facility
  bookingId: Int
  booking: Booking
  companySize: Int
  workStyleReform: Boolean
  purchaseRateId: Int
  purchaseRate: PurchaseRate
  seasons: [String!]
  facilities: [String!]
  picStaffId: Int
  picStaff: Staff
  campaignId: Int
  campaign: Campaign
  remarks: String
  importMethod: ImportMethodEnum!
  actionRemarks: String
  sendEmail: Boolean!
  newClientCreatedAt: DateTimeIso
  medias: [WebRequestMedia!]!
  createdAt: DateTimeIso!
  computed: WebRequestComputed
  ignore: Boolean!
  wasExistingClient: Boolean
  times: Int
  name: String!
  appliedCampaigns: [Campaign!]!
}

enum WebRequestType {
  Brochure
  TrialStay
  Visit
  OnlineCounseling
}

type Booking {
  id: Int!
  bookingGroupId: Int!
  bookingGroup: BookingGroup!
  bookingTypeId: Int!
  bookingType: BookingType!
  cancelledAt: DateTimeIso
  accommodationPrice: Int!
  spAccommodationPoint: Int!
  fpAccommodationPoint: Int!
  checkInDate: DateString!
  checkOutDate: DateString!
  checkedInAt: DateTimeIso
  checkedOutAt: DateTimeIso
  roomId: Int!
  room: Room!
  roomFixed: Boolean!
  refundPrice: Int!
  refundEPoint: Int!
  spRefundPoint: Int!
  fpRefundPoint: Int!
  temporary: Boolean!
  blockRoom: Boolean!
  clientId: Int
  client: Client
  contractId: Int
  contract: Contract
  salesChannel: BookingSalesChannel
  bookingPlanId: Int
  bookingPlan: BookingPlan
  bookingTicketId: String
  bookingTicket: BookingTicket
  guests: [Guest!]!
  guestSchedules: [GuestSchedule!]!
  mailBookingCertificate: Boolean!
  mailFacilityGuide: Boolean!
  mailPointCertificate: Boolean!
  mailAds: Boolean!
  toothbrush: Boolean!
  yukata: Boolean!
  bookingBarNote: String
  priorityBooking: Boolean!
  priorityBookingNotifiedAt: DateTimeIso
  remarks: String
  bookingRemindedAt: DateTimeIso
  stayConfirmedAt: DateTimeIso
  vmTemporary: Boolean!
  createdAt: DateTimeIso!
  createdById: Int
  createdBy: Staff
  updatedAt: DateTimeIso
  parkingRequestedNumber: Int
  petNumber: Int
  petBreed: String
  parkings: [FacilityParkingReservation!]
  rentalItems: [RentalItemReservation!]
  computed: BookingComputed
  computedForList: BookingComputedForList
  charges: [BookingAdditionalCharge!]
  facilityDailyReportConversionDetail: FacilityDailyReportConversionDetail
  representative: Guest
  code: String
  preferSameRoom: Boolean!
  canModifyByClient: Boolean!
  bookingCertificateUrl: String
  hasParking: Boolean!
  hasRentalItem: Boolean!
  chargeTotal(typeIds: [Int!]!): BookingAdditionalChageSummary!
  finalizedInvoices: [BookingInvoice!]!
  needsStayConfirmation: Boolean!
}

type BookingGroup {
  id: Int!
  createdClientId: Int
  createdClient: Client
  createdSubMemberId: Int
  createdSubMember: SubMember
  otaCode: String
  otaName: String
  otaBookingId: String
  otaBookedAt: DateTimeIso
  otaNotificationId: String
  otaSpecialRequest: String
  otaOtherServiceInfo: String
  otaPlanCode: String
  otaPlanName: String
  otaMealCondition: String
  otaTaxServiceFee: String
  otaPaymentMethod: String
  otaTotalAccommodationFee: Int
  otaUserId: String
  otaUsedPoints: Int
  otaAccommodationFeeAfterPoints: Int
  createdAt: DateTimeIso!
  feePaymentType: FeePaymentType
  bookings: [Booking!]!
  mwRights: [MwRight!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #
  chargeRemarks: [String!]!
}

type SubMember {
  id: Int!
  clientId: Int!
  client: Client!
  subMemberTypeId: Int!
  subMemberType: SubMemberType!
  name: String
  nameKana: String
  birthday: DateString
  sex: Gender
  relationshipId: Int
  relationship: PersonRelationship
  postalCode: String
  prefecture: String
  locality: String
  address1: String
  address2: String
  tel: String
  email: String
  remarks: String
  memberUser: MemberUser
  createdUserId: Int
}

type SubMemberType {
  id: Int!
  name: String!
}

type PersonRelationship {
  id: Int!
  name: String!
}

type MwRight {
  id: Int!
  contractId: Int!
  contract: Contract!
  year: Int!
  latterHalf: Boolean!
  bookYear: Int!
  bookWeekNo: Int!
  depositAt: DateTimeIso
  exchangedAt: DateTimeIso
  oldMwRightId: Int
  oldMwRight: MwRight
  newBookingGroupId: Int!
  newBookingGroup: BookingGroup!
  depositExpireDate: DateString
  revokedAt: DateTimeIso
  revokeReason: MwRightRevokeReason
  createdAt: DateTimeIso!
  status: String!
  bookRoomType: RoomType!
}

enum MwRightRevokeReason {
  RCI
  Other
  Transfer
}

type BookingType {
  id: Int!
  code: String!
  name: String!
}

enum BookingSalesChannel {
  MemberWeb
  OTA
  PMS
}

type BookingTicket {
  id: String!
  bookingTicketTypeId: String!
  bookingTicketType: BookingTicketType!
  number: String!
  secret: String!
  bookingId: Int
  booking: Booking
  usedAt: DateTimeIso
  disabled: Boolean!
  disabledAt: DateTimeIso
  email: String
  isAvailable: Boolean!
  isUsed: Boolean!
}

type BookingTicketType {
  id: String!
  name: String!
  intendedClientId: Int
  intendedClient: Client
  availableFromDate: DateString!
  availableToDate: DateString!
  bookCallCenter: Boolean!
  bookSalesRep: Boolean!
  availableSunday: Boolean!
  availableMonday: Boolean!
  availableTuesday: Boolean!
  availableWednesday: Boolean!
  availableThursday: Boolean!
  availableFriday: Boolean!
  availableSaturday: Boolean!
  availableHoliday: Boolean!
  nightwear: Boolean!
  toothbrush: Boolean!
  razor: Boolean!
  rentalItem: Boolean!
  accommodationPrice: Int!
  cancelDeadline: Int!
  bookingFromDate: DateString!
  bookingFromDays: Int!
  assetValue: Int!
  notes: String
  createdAt: DateTimeIso!
  createdById: Int
  createdBy: Staff
  bookingTickets: [BookingTicket!]!
  roomTypes: [BookingTicketRoomType!]!
  exceptDates: [BookingTicketExceptDate!]!
  computed: BookingTicketTypeComputed
}

type BookingTicketRoomType {
  id: Int!
  bookingTicketTypeId: String!
  bookingTicketType: BookingTicketType!
  roomTypeId: Int!
  roomType: RoomType!
}

type BookingTicketExceptDate {
  id: Int!
  bookingTicketTypeId: String!
  bookingTicketType: BookingTicketType!
  exceptDate: DateString!
}

type BookingTicketTypeComputed {
  id: Int!
  issuedCount: Int!
  usedCount: Int!
  availableCount: Int!
}

type Guest {
  id: Int!
  bookingId: Int!
  booking: Booking!
  name: String
  kana: String
  representative: Boolean!
  clientId: Int
  client: Client
  subMemberId: Int
  subMember: SubMember
  age: Int
  child: Boolean!
  sex: Gender
  bedShared: Boolean!
  occupation: String
  tel: String
  email: String
  country: String
  postalCode: String
  prefecture: String
  address1: String
  address2: String
  nationality: String
  passportPhoto: String
  passportNumber: String
  schedules: [GuestSchedule!]!
  memberInfo: GuestMemberInfo!
  stayDateRange: DateRange
}

type GuestSchedule {
  id: Int!
  stayDate: DateString!
  bookingId: Int!
  booking: Booking!
  guestId: Int!
  guest: Guest!
  bathing: Boolean!
  stay: Boolean!
}

type GuestMemberInfo {
  memberId: String
  clientId: Int
}

type DateRange {
  fromDate: DateString!
  toDate: DateString!
}

type FacilityParkingReservation {
  id: Int!
  bookingId: Int
  booking: Booking
  fromDate: DateString!
  toDate: DateString!
  facilityParkingId: Int!
  facilityParking: FacilityParking!
  carNumber: String
  height: Int
  parkingNumber: Int
  note: String
  color: String
  block: Boolean!
}

type FacilityParking {
  id: Int!
  facilityId: Int!
  facility: Facility!
  name: String!
  maxHeight: Int
  quantity: Int!
  allowCancelWait: Boolean!
}

type RentalItemReservation {
  id: Int!
  bookingId: Int
  booking: Booking
  fromDate: DateString!
  toDate: DateString!
  rentalItemId: Int!
  rentalItem: RentalItem!
  quantity: Int!
  unitPrice: Int!
  rentalPeriod: RentalPeriod!
  cancelledAt: DateTimeIso
  note: String
  block: Boolean!
}

type RentalItem {
  id: Int!
  rentalItemDefId: Int
  rentalItemDef: RentalItemDef
  facilityId: Int!
  facility: Facility!
  quantity: Int!
}

type RentalItemDef {
  id: Int!
  name: String!
  rentalPeriod: RentalPeriod!
  price: Int!
  order: Int
}

enum RentalPeriod {
  Day
  Stay
}

type BookingComputed {
  id: Int!
  status: String!
  invoiced: Boolean!
  needsInvoice: Boolean!
}

type BookingComputedForList {
  id: Int!
  adults: Int!
  children: Int!
  bedShares: Int!
  hasParking: Boolean!
  hasRentalItem: Boolean!
}

type BookingAdditionalCharge {
  id: Int!
  bookingId: Int!
  booking: Booking!
  stayDate: DateString!
  price: Int
  spPoint: Int
  fpPoint: Int
  tvpPoint: Int
  quantity: Int!
  typeId: Int!
  type: BookingAdditionalChargeType!
  subject: String!
  note: String
  taxIncluded: Boolean!
  taxType: TaxType!
  bookingInvoiceId: Int
  bookingInvoice: BookingInvoice
  createdManually: Boolean!
  priceWithSalesTax: Int
  salesTax: Int
  createdAt: DateTimeIso!
  totalPrice: Int
  totalSalesTax: Int
  totalWithoutTax: Int
  invoiceName: String!
  externalPaymentMethodId: Int
  externalPaymentMethod: BookingPaymentMethod
  priceChangeAllowed: Boolean!
}

type BookingAdditionalChargeType {
  id: Int!
  code: String!
  name: String!
}

enum TaxType {
  Normal
  Lowered
  Exempt
}

type BookingInvoice {
  id: Int!
  bookingGroupId: Int!
  bookingGroup: BookingGroup!
  issueDate: DateString!
  addresseeName: String
  defaultEmailTo: String
  representativeEmailTo: String
  totalForNormalTax: Int!
  normalTaxAmount: Int!
  totalForLoweredTax: Int!
  loweredTaxAmount: Int!
  totalForExemptTax: Int!
  showReceipt: Boolean!
  receiptId: Int!
  receipt: Receipt!
  receiptFor: String
  finalizedAt: DateTimeIso
  pdfFile: String
  createdAt: DateTimeIso!
  charges: [BookingAdditionalCharge!]!
  payments: [BookingPayment!]!
  emails: [BookingInvoiceSendEmail!]!
  pdfFileUrl: String
}

type Receipt {
  id: Int!
  receiptTypeId: Int!
  receiptType: ReceiptType!
  pdfFile: String
  pdfFileUrl: String
}

type ReceiptType {
  id: Int!
  code: String!
  name: String!
}

type BookingPayment {
  id: Int!
  bookingInvoiceId: Int!
  bookingInvoice: BookingInvoice!
  bookingPaymentMethodId: Int!
  bookingPaymentMethod: BookingPaymentMethod!
  paymentAmount: Int!
  clientChargeId: Int
  clientCharge: ClientCharge
  paidAt: DateTimeIso
}

type BookingPaymentMethod {
  id: Int!
  category: String!
  name: String!
  order: Int!
}

type ClientCharge {
  id: Int!
  clientId: Int!
  client: Client!
  contractId: Int
  contract: Contract
  chargeDate: DateString!
  price: Int!
  paymentMethod: ClientChargePaymentMethod!
  clientChargeTypeId: Int
  clientChargeType: ClientChargeType
  isError: Boolean!
  errorMessage: String
  gmoTranId: String
  topCardNumber: String
  note: String
  staffId: Int
  staff: Staff
  receiptId: Int
  receipt: Receipt
  showMember: Boolean!
  createdAt: DateTimeIso!
}

enum ClientChargePaymentMethod {
  TOP
  GMO
}

type ClientChargeType {
  id: Int!
  name: String!
  order: Int!
  topMemberId: Int
  topMember: TopMember
  gmoClientField1: String
  gmoClientField2: String
  gmoClientField3: String
}

type TopMember {
  id: Int!
  memberId: String!
  memberName: String
  memberNameKana: String
  productName: String
  productNameKana: String
}

type BookingInvoiceSendEmail {
  id: Int!
  bookingInvoiceId: Int!
  bookingInvoice: BookingInvoice!
  emailId: Int
  emailHistory: EmailHistory!
  email: String!
}

type EmailHistory {
  id: Int!
  to: [String!]!
  subject: String
  body: String
  sentAt: DateTimeIso
  lastError: String
  lastErrorAt: DateTimeIso
  nextRetryAt: DateTimeIso
  retry: Int!
  noRetry: Boolean!
}

type FacilityDailyReportConversionDetail {
  id: Int!
  facilityDailyReportId: Int!
  facilityDailyReport: FacilityDailyReport!
  bookingId: Int!
  booking: Booking!
  cleaning: CleaningEnum
  cleaningFeeExempt: FeeExempt
  cleaningFeeExemptAmount: Int
  facilityFeeExempt: FeeExempt
  facilityFeeExemptAmount: Int
  remarks: String
  createdAt: DateTimeIso!
}

type FacilityDailyReport {
  id: Int!
  reportDate: DateString!
  facilityId: Int!
  facility: Facility!
  type: FacilityDailyReportType!
  cash1: Int!
  cash5: Int!
  cash10: Int!
  cash50: Int!
  cash100: Int!
  cash500: Int!
  cash1000: Int!
  cash2000: Int!
  cash5000: Int!
  cash10000: Int!
  cashAdjustment: Int!
  cashAdjustmentReason: String
  notes: String
  facilitySubmittedAt: DateTimeIso
  hqConfirmedAt: DateTimeIso
  hqRejectedAt: DateTimeIso
  createdAt: DateTimeIso!
  status: String!
}

enum FacilityDailyReportType {
  TVS
  CNV
}

enum CleaningEnum {
  Yes
  No
}

enum FeeExempt {
  Clients
  ClientsAndFacilities
}

type BookingAdditionalChageSummary {
  totalJpy: Int!
  totalSp: Int!
  totalFp: Int!
}

enum ImportMethodEnum {
  Web
  CSV
}

type WebRequestMedia {
  mediaType: String!
  mediaOther: String
  campaignId: Int
  campaign: Campaign
}

type WebRequestComputed {
  id: Int!
  hasPreviousRequest: Boolean
}

type ContractPhase {
  id: Int!
  name: String!
}

type ContractPurchaseType {
  id: Int!
  name: String!
}

type ContractPurchaseTypeDetail {
  id: Int!
  name: String!
}

type ContractPurchasePurpose {
  id: Int!
  name: String!
  forIndividual: Boolean!
  forCompany: Boolean!
}

type ContractApplicationType {
  id: Int!
  name: String!
}

type ContractPurchasePaymentMethod {
  id: Int!
  name: String!
}

type ContractPoint {
  id: Int!
  contractId: Int!
  contract: Contract!
  point: Int!
  year: Int!
  validFrom: DateString!
  validThru: DateString!
  pointPrice: Int!
  grantReason: GrantReason!
  grantedAt: DateTimeIso!
  createdAt: DateTimeIso!
  remarks: String
  contractPointHistories: [ContractPointHistory!]
  pointRemains: Int!
  computed: ContractPointComputed
}

enum GrantReason {
  Annual
  Purchased
  Rollover
  Advance
  Other
  Transfer
  SignupBonus
  Campaign
}

type ContractPointHistory {
  id: Int!
  contractPointId: Int!
  contractPoint: ContractPoint!
  pointChange: Int!
  changeReason: String
  exceptionalReason: String
  changedAt: DateTimeIso!
  bookingId: Int
  booking: Booking
  stayDate: DateString
  staffId: Int
  staff: Staff
  clientChargeId: Int
  clientCharge: ClientCharge
  pointExchangeId: Int
  pointExchange: PointExchange
  consumeDate: DateString
  movedToContractId: Int
  movedToContract: ContractPoint
  refunded: Boolean!
}

type PointExchange {
  id: Int!
  clientId: Int!
  client: Client!
  contractId: Int
  contract: Contract
  quantity: Int!
  tvpPoint: Int
  spPoint: Int
  fpPoint: Int
  confirmedAt: DateTimeIso
  postalCode: String
  prefecture: String
  locality: String
  address1: String
  address2: String
  createdAt: DateTimeIso!
  emailHistoryId: Int
  emailHistory: EmailHistory
  pointExchangeProductId: Int!
  pointExchangeProduct: PointExchangeProduct!
  staffId: Int
  staff: Staff
  memberUserId: Int
  memberUser: MemberUser
  name: String
  tel: String
  email: String
}

type PointExchangeProduct {
  id: Int!
  name: String!
  tvpPoint: Int!
  spPoint: Int!
  fpPoint: Int!
  emailAddress: String
  companyName: String
}

type ContractPointComputed {
  id: Int!
  contractPoint: ContractPoint!
  pointSpent: Int!
}

type ContractAttachment {
  id: Int!
  contractId: Int!
  contract: Contract!
  name: String!
  fileUrl: String
}

type ContractPointSummaryResult {
  year: Int!
  validFrom: DateString!
  validTo: DateString!
  pointRemains: Int!
}

type ContractPointMovement {
  contractId: Int!
  changedAt: DateTimeIso!
  reason: String!
  validFrom: DateString!
  validThru: DateString!
  pointChange: Int!
  remarks: String
}

type VmStayRightDate {
  startDate: DateString!
  endDate: DateString!
}

type MwContractUsageYear {
  year: Int!
  weekInfo: MwPwWeekInfo
  splitInfo: MwSplitInfo
  actions: MwRightActions!
  firstHalf: MwHalfRightSummary!
  latterHalf: MwHalfRightSummary!
  status: String!
  currentRights: [MwHalfRight!]!
}

type MwPwWeekInfo {
  fromDate: DateString!
  toDate: DateString!
  firstHalfFromDate: DateString!
  firstHalfToDate: DateString!
  latterHalfFromDate: DateString!
  latterHalfToDate: DateString!
}

type MwSplitInfo {
  bookingGroupId: Int!
  firstCheckInDate: DateString!
  lastCheckOutDate: DateString!
}

type MwRightActions {
  canSplit: Boolean!
  canDeposit: Boolean!
  canExchange: Boolean!
  depositBy: DateString
  depositExpireDate: DateString
}

type MwHalfRightSummary {
  actions: MwRightActions!
  rights: [MwHalfRight!]!
  splitInfo: MwSplitInfo
  status: String!
}

type MwHalfRight {
  id: Int!
  contractId: Int!
  contract: Contract!
  year: Int!
  latterHalf: Boolean!
  bookYear: Int!
  bookWeekNo: Int!
  depositAt: DateTimeIso
  exchangedAt: DateTimeIso
  oldMwRightId: Int
  oldMwRight: MwRight
  newBookingGroupId: Int!
  newBookingGroup: BookingGroup!
  depositExpireDate: DateString
  revokedAt: DateTimeIso
  revokeReason: MwRightRevokeReason
  createdAt: DateTimeIso!
  status: String!
  bookRoomType: RoomType!
  firstCheckInDate: DateString!
  lastCheckOutDate: DateString!
  days: Int!
  roomType: RoomType!
}

type ClientContact {
  id: Int!
  clientId: Int!
  client: Client!
  type: ClientContactType!
  labelName: String
  postalCode: String
  prefecture: String
  locality: String
  address1: String
  address2: String
  tel: String
  fax: String
  email: String
  mobile: String
  telOrMobile: String
}

type IncomeLevel {
  id: Int!
  name: String!
}

type ClientChildType {
  id: Int!
  name: String!
}

type RegisteredCC {
  id: Int!
  clientId: Int!
  client: Client!
  cardNo: String!
  current: Boolean!
}

enum MemberUserStatus {
  Confirmed
  ForceChangePassword
  Unconfirmed
}

input OrderByInput {
  fieldName: String!
  direction: String
  nulls: String
}

input PaginationInput {
  skip: Int = 0
  take: Int = 10
}

input MemberUserSearchInput {
  name: String
  tel: String
  prefecture: String
  locality: String
  streetAddress: String
  otherAddress: String
  isCompany: String = null
}

input FacilityListFilterInput {
  types: [FacilityTypeEnum!]
}

type BookingAvailableFacilityListResult {
  id: Int!
  type: FacilityTypeEnum!
  name: String!
  nameRoma: String
  nameAbbr: String
  nameOfficial: String
  postalCode: String
  address1: String
  address2: String
  tel: String
  fax: String
  email: String
  opened: DateString
  bedShareRule: BedShareRule!
  bedShareMaxAge: Int
  floorPlanPdf: String
  spSetupFee: Int!
  mwCleaningFee: Int!
  mwFacilityFee: Int!
  mwFacilityFee12to47: Int
  mwFacilityFeeOkinawa: Boolean
  hotSpringFee: Int!
  hotSpringTax: Int!
  dpSpecial: Boolean!
  dpUtilityFee: Int!
  dpCleaningFee: Int!
  parkingReservationRequired: Boolean!
  parkingSpacesPerRoom: Int
  order: Int
  rakutsuHotelCode: String
  hotelTaxEnabled: Boolean!
  rakutsuSelectBookingIntervalMinutes: Int!
  roomTypes: [BookingAvailableFacilityListRoomTypeResult!]!
  facilityHpUrl: String
  nameWeb: String
  tags: [String!]!
  mainImageUrl: String
  otherNotes: String
  nameOnClientWeb: String!
  shortName: String!
  floorPlanPdfUrl: String
}

type BookingAvailableFacilityListRoomTypeResult {
  id: Int!
  facilityId: Int!
  facility: Facility
  name: String!
  maxOccupancy: Int!
  bedShareMaxOccupancy: Int
  backgroundColor: String
  foreColor: String
  rakutsuId: String
  order: Int!
  bookingRemarks: String
  accommodationPrices: [AccommodationPrice!]!
  rooms: [Room!]!
  priceAndAvailability: [BookingAvailableFacilityListRoomTypeAccommodationPriceResult!]!
}

type BookingAvailableFacilityListRoomTypeAccommodationPriceResult {
  stayDate: DateString!
  contractPrice: Int
  roomsAvailable: Int!
}

type PublicFacilityInfo {
  id: Int!
  name: String!
  shortName: String!
}

type VmOccupancyListResult {
  years: [VmOccupancyListYearResult!]!
}

type VmOccupancyListYearResult {
  year: Int!
  days: [VmOccupancyListYearDayResult!]!
}

type VmOccupancyListYearDayResult {
  stayDate: DateString!
  roomsCount: Int!
  availableRoomsCount: Int!
  bookedVmRoomsCount: Int!
  ratio: Float!
}

type Inventory {
  id: Int!
  roomTypeId: Int!
  roomType: RoomType!
  stayDate: String!
  inventoryTypeId: Int!
  inventoryType: InventoryType!
  rooms: Int!
  bookings: [Booking!]!
}

type InventoryType {
  id: Int!
  name: String!
  nameAbbr: String!
  color: String!
  secondaryColor: String
  memberPublic: Boolean!
  otaPublic: Boolean!
  mwPublic: Boolean!
  externallyReserved: Boolean!
  memberTel: Boolean!
  vmPlan: Boolean!
}

type InventoryAvailabilityResult {
  areAvailable: Boolean!
}

type ContractPaginatedResponse {
  items: [Contract!]!
  total: Int!
  hasMore: Boolean!
}

input ContractListFilterInput {
  clientId: Int
  ended: Boolean
  productTypeIds: [Int!]
  paymentDateFrom: DateString
  paymentDateTo: DateString
  accountingChecked: Boolean
  includeTentative: Boolean = false
}

type GetPriceAndSalesTaxResult {
  totalPrice: Float!
  salesTax: Float!
  priceWithoutSalesTax: Float!
}

type PriceCalculationResult {
  pricesByDay: [PriceCalculationPriceByDayForStaff!]!
}

type PriceCalculationPriceByDayForStaff {
  date: String!
  accommodationFee: Int!
  fees: [PriceCalculationPriceFee!]!
  accommodationPrice: AccommodationPrice
}

type PriceCalculationPriceFee {
  type: BookingAdditionalChargeType!
  subject: String!
  price: Int!
  taxIncluded: Boolean!
  taxType: TaxType!
  priceWithSalesTax: Int
}

type AccommodationPriceImportPaginatedResponse {
  items: [AccommodationPriceImport!]!
  total: Int!
  hasMore: Boolean!
}

type AccommodationPriceImport {
  id: Int!
  csvFile: String!
  scheduledAt: DateTimeIso!
  importedAt: DateTimeIso
  cancelledAt: DateTimeIso
  queueStatus: QueueStatus!
  authorizedBy: String
  remarks: String
  staffId: Int
  staff: Staff
  createdAt: DateTimeIso!
  status: String!
}

enum QueueStatus {
  None
  Queued
  OnProcess
  Finished
  Failed
  Stopped
}

type AccommodationPriceHistory {
  stayDate: DateString!
  spPoint: Int
  fpPoint: Int
  vsPrice1: Int
  vsPrice2: Int
  vsPrice3: Int
  vsPrice4: Int
  vsPrice5: Int
  vsPrice6: Int
  vsPrice7: Int
  vsPrice8: Int
  vsPrice9: Int
  vsPrice10: Int
  vmPrice1: Int
  vmPrice2: Int
  vmPrice3: Int
  vmPrice4: Int
  vmPrice5: Int
  vmPrice6: Int
  vmPrice7: Int
  vmPrice8: Int
  vmPrice9: Int
  vmPrice10: Int
  dpPrice: Int
  id: Int!
  roomTypeId: Int!
  roomType: RoomType!
  changeType: ChangeType!
  reason: String!
  staffId: Int
  staff: Staff
  createdAt: DateTimeIso!
}

enum ChangeType {
  Import
  GUI
}

type YearContractPointInfoResult {
  points: Int!
  pointsForRollover: Int!
  pointsForMoveAdvance: Int!
  rolloverFeePerPoint: Int!
  validFrom: DateString!
  validTo: DateString!
}

type MyAvailablePointsResult {
  contractPoints: [MyAvailableContractPoints!]!
  tvpPoint: Int!
}

type MyAvailableContractPoints {
  contractId: Int!
  contract: Contract!
  pointRemains: Int!
}

type ClientCommentPaginatedResponse {
  items: [ClientComment!]!
  total: Int!
  hasMore: Boolean!
}

type ClientComment {
  id: Int!
  clientId: Int!
  client: Client!
  commentById: Int
  commentBy: Staff
  comment: String!
  commentChangedAt: DateTimeIso
  likes: Int!
  createdAt: DateTimeIso!
  likesByStaffs: [ClientCommentLike!]
  likedByStaff: ClientCommentLike
}

type ClientCommentLike {
  clientCommentId: Int!
  clientComment: ClientComment!
  staffId: Int!
  staff: Staff!
}

type ClientCommentMentionPaginatedResponse {
  items: [ClientCommentMention!]!
  total: Int!
  hasMore: Boolean!
}

type ClientCommentMention {
  id: Int!
  clientCommentId: Int!
  clientComment: ClientComment!
  mentionedStaffId: Int!
  mentionedStaff: Staff!
  sendMailQueueStatus: QueueStatus!
  sendMailQueueErrorsCount: Int!
  createdAt: DateTimeIso!
}

type BookingCancellationPenaltiesCalculationResult {
  penalties: [BookingCancellationPenalty!]!
  noShowPenalty: Float!
}

type BookingCancellationPenalty {
  stayDate: String!

  # Penalty percentage from 0.0 to 1.0
  penaltyRate: Float!
  penaltyPrice: Int
  penaltySpPoint: Int
  penaltyFpPoint: Int
  penaltyTvpPoint: Int
  price: Int
  spPoint: Int
  fpPoint: Int
  tvpPoint: Int
  vmRightPrice: Int
  penaltyVmRightPrice: Int
}

type CancelPolicyResult {
  noShowPenalty: Float!
  day0Penalty: Float!
  thresholds: [CancelPolicyThreshold!]!
  appliedToday: Float
}

type CancelPolicyThreshold {
  day: Int!
  penalty: Float!
}

type Holiday {
  name: String!
  holidayDate: DateString!
}

type CheckBookingExtensionPriceResult {
  days: [CheckBookingExtensionPriceDay!]!
}

type CheckBookingExtensionPriceDay {
  stayDate: DateString!
  accommodationPrice: Int
  bookingPlanFee: Int
  accommodationPriceSp: Int
  accommodationPriceFp: Int
}

input BookingExtendDayInput {
  stayDate: DateString!
  inventoryTypeId: Int!
}

type RecordedIncomeFacilityDayResult {
  report: FacilityDailyReportOutput!
  details: [FacilityDailyReportPayment!]
  bookings: [Booking!]
}

type FacilityDailyReportOutput {
  id: Int
  reportDate: String!
  facilityId: Int!
  type: FacilityDailyReportType!
  cash1: Int
  cash5: Int
  cash10: Int
  cash50: Int
  cash100: Int
  cash500: Int
  cash1000: Int
  cash2000: Int
  cash5000: Int
  cash10000: Int
  cashAdjustment: Int
  cashAdjustmentReason: String
  notes: String
  facilitySubmittedAt: DateTimeIso
  hqConfirmedAt: DateTimeIso
  hqRejectedAt: DateTimeIso
}

type FacilityDailyReportPayment {
  paymentMethodId: Int!
  category: String!
  name: String!
  order: Int!
  amount: Int!
  detail: FacilityDailyReportDetail
}

type FacilityDailyReportDetail {
  id: Int!
  facilityDailyReportId: Int!
  facilityDailyReport: FacilityDailyReport!
  bookingPaymentMethodId: Int!
  bookingPaymentMethod: BookingPaymentMethod!
  check1stName: String
  check2ndName: String
  voucher1Amount: Int
  voucher1Count: Int
  voucher2Amount: Int
  voucher2Count: Int
  voucher3Amount: Int
  voucher3Count: Int
  voucher4Amount: Int
  voucher4Count: Int
  voucher5Amount: Int
  voucher5Count: Int
  createdAt: DateTimeIso!
  attachments: [FacilityDailyReportDetailAttachment!]
}

type FacilityDailyReportDetailAttachment {
  id: Int!
  facilityDailyReportDetailId: Int!
  facilityDailyReportDetail: FacilityDailyReportDetail!
  attachmentFile: String!
  createdAt: DateTimeIso!
}

input GetRecordedIncomeInput {
  facilityId: Int!
  reportDate: DateString
}

type DownloadAttachmentFacilityDailyReportResult {
  attachments: [DownloadUrlAttachment!]!
}

type DownloadUrlAttachment {
  downloadUrl: String!
}

input DownloadFileFacilityDailyReportInput {
  facilityId: Int!
  reportDate: DateString!
  paymentMethodId: Int!
}

type FacilityDailyReportPaginatedResponse {
  items: [FacilityDailyReport!]!
  total: Int!
  hasMore: Boolean!
}

type NextDailyReportDateResult {
  reportDate: DateString!
}

type BookingAdditionalChargeSubject {
  id: Int!
  typeId: Int!
  type: BookingAdditionalChargeType!
  name: String!
  taxType: TaxType!
  manualCreate: Boolean!
}

type ChargeDefault {
  defaultPrice: Int
  priceChangeAllowed: Boolean!
}

type AvailableRentalItemsResponse {
  id: Int!
  rentalItemDefId: Int
  rentalItemDef: RentalItemDef!
  facilityId: Int!
  facility: Facility!
  quantity: Int!
  availabilities: [AvailableQuantityRentalItem!]!
}

type AvailableQuantityRentalItem {
  stayDate: String!
  quantity: Int
}

type SaleItem {
  id: Int!
  name: String!
  price: Int!
  taxType: TaxType!
  allowPriceOverwrite: Boolean!
  forSale: Boolean!
  updatable: Boolean!
}

type StaffPaginatedResponse {
  items: [Staff!]!
  total: Int!
  hasMore: Boolean!
}

input StaffSearchInput {
  name: String
  email: String
  staffRoleId: Int
}

type AvailableFacilityParkingItemsResponse {
  id: Int!
  facilityId: Int!
  facility: Facility!
  name: String!
  maxHeight: Int
  quantity: Int!
  allowCancelWait: Boolean!
  availabilities: [AvailableQuantityFacilityParking!]!
}

type AvailableQuantityFacilityParking {
  stayDate: String!
  quantity: Int
}

type FacilityBookingRemarks {
  facilityId: Int!
  facility: Facility!
  bookingTypeId: Int!
  bookingType: BookingType!
  remarks: String!
}

type BookingAccommodationPrice {
  stayDate: DateString!
  spPoint: Int
  fpPoint: Int
  vsPrice1: Int
  vsPrice2: Int
  vsPrice3: Int
  vsPrice4: Int
  vsPrice5: Int
  vsPrice6: Int
  vsPrice7: Int
  vsPrice8: Int
  vsPrice9: Int
  vsPrice10: Int
  vmPrice1: Int
  vmPrice2: Int
  vmPrice3: Int
  vmPrice4: Int
  vmPrice5: Int
  vmPrice6: Int
  vmPrice7: Int
  vmPrice8: Int
  vmPrice9: Int
  vmPrice10: Int
  dpPrice: Int
  id: Int!
  bookingId: Int!
  booking: Booking!
  inventoryTypeId: Int!
  inventoryType: InventoryType!
  tvpPoint: Int
  ticketAccommodationPrice: Int
}

type ValidateVsPromoCodeResult {
  type: SignupBonusType!
  vsPromoDiscount: Int!
  vsPromoTVP: Int!
}

enum SignupBonusType {
  Discount
  Point
  Voucher
  Mile
}

type GetVsAnnualFeeResult {
  baseFee: Int!
  promoDiscount: Int!
  promoTVP: Int!
  total: Int!
}

type MwWeekCalendar {
  id: Int!
  facilityId: Int!
  facility: Facility!
  mwDate: DateString!
  year: Int!
  weekNo: Int!
  mwRank: MwRank!
  latterHalf: Boolean!
}

type NonProductPrice {
  id: Int!
  roomTypeId: Int!
  roomType: RoomType!
  stayDate: DateString!
  nonProductId: Int!
  nonProduct: NonProduct!
  price1: Int!
  price2: Int!
  price3: Int!
  price4: Int!
  price5: Int!
  price6: Int!
  price7: Int!
  price8: Int!
  price9: Int!
  price10: Int!
}

type NonProduct {
  id: Int!
  name: String!
}

type BookingPlanPaginatedResponse {
  items: [BookingPlan!]!
  total: Int!
  hasMore: Boolean!
}

input BookingPlanListFilterInput {
  availableFromDate: DateString
  availableToDate: DateString
  facilityId: Int
  roomTypeId: Int
}

type AvailableBookingPlanItemsResponse {
  items: [AvailableBookingPlanItems!]!
}

type AvailableBookingPlanItems {
  id: Int!
  enabled: Boolean!
  title: String!
  subtitle: String
  targetBookingType: TargetBookingType!
  roomTypeId: Int!
  roomType: RoomType!
  imagePublicUrl1: String
  imagePublicUrl2: String
  description: String
  remarks: String
  question1Text: String
  question1Type: BookingPlanQuestionType
  question1Required: Boolean
  question1Select1: String
  question1Select2: String
  question1Select3: String
  question1Select4: String
  question1Select5: String
  question2Text: String
  question2Type: BookingPlanQuestionType
  question2Required: Boolean
  question2Select1: String
  question2Select2: String
  question2Select3: String
  question2Select4: String
  question2Select5: String
  question3Text: String
  question3Type: BookingPlanQuestionType
  question3Required: Boolean
  question3Select1: String
  question3Select2: String
  question3Select3: String
  question3Select4: String
  question3Select5: String
  question4Text: String
  question4Type: BookingPlanQuestionType
  question4Required: Boolean
  question4Select1: String
  question4Select2: String
  question4Select3: String
  question4Select4: String
  question4Select5: String
  question5Text: String
  question5Type: BookingPlanQuestionType
  question5Required: Boolean
  question5Select1: String
  question5Select2: String
  question5Select3: String
  question5Select4: String
  question5Select5: String
  additionalChargeType: BookingPlanAdditionalChargeType!
  fixedAdditionalCharge: Int!
  fixedAdditionalChargeChild: Int!
  stopSaleDay: Int!
  stopSaleTime: String!
  availableFromDate: DateString!
  availableToDate: DateString!
  exceptionFromDate: DateString
  exceptionToDate: DateString
  availableSunday: Boolean!
  availableMonday: Boolean!
  availableTuesday: Boolean!
  availableWednesday: Boolean!
  availableThursday: Boolean!
  availableFriday: Boolean!
  availableSaturday: Boolean!
  bookThroughDays: Int!
  webPublicFromDate: DateString!
  webPublicToDate: DateString!
  bookingFromDate: DateString!
  bookingToDate: DateString!
  guestCountLimit: Int
  roomCountLimit: Int
  discountType: BookingPlanDiscountType!
  day1Discount: Int!
  day2Discount: Int!
  day3Discount: Int!
  day4Discount: Int!
  day5Discount: Int!
  day6Discount: Int!
  day7Discount: Int!
  day8Discount: Int!
  day9Discount: Int!
  continueDiscountAfterDay9: Boolean!
  minGuestCount: Int!
  maxGuestCount: Int!
  minDays: Int!
  maxDays: Int!
  overrideCancelPolicy: Boolean!
  noShowPenalty: Float
  day0Penalty: Float
  threshold1Day: Int
  threshold1Penalty: Float
  threshold2Day: Int
  threshold2Penalty: Float
  threshold3Day: Int
  threshold3Penalty: Float
  threshold4Day: Int
  threshold4Penalty: Float
  threshold5Day: Int
  threshold5Penalty: Float
  threshold6Day: Int
  threshold6Penalty: Float
  threshold7Day: Int
  threshold7Penalty: Float
  createdByName: String!
  bookingPlanCharges: [BookingPlanCharge!]
  hasDiscount: Boolean!
  prices: [AvailableBookingPlanPricesResponse!]!
}

type AvailableBookingPlanPricesResponse {
  stayDate: String!
  accommodationPrice: Int
  accommodationPriceSp: Int
  accommodationPriceFp: Int
  bookingPlanFee: PriceCalculationPriceFee
}

input AvailableBookingPlanListFilterInput {
  roomTypeId: Int!
  checkInDate: DateString!
  checkOutDate: DateString!
  contractId: Int!
  rooms: [AvailableBookingPlanRoomsInput!]!
}

input AvailableBookingPlanRoomsInput {
  numberOfAdults: Int!
  numberOfChildren: Int!
  numberOfChildrenWithBedShare: Int!
}

type BookingPaginatedResponse {
  items: [Booking!]!
  total: Int!
  hasMore: Boolean!
}

input BookingListFilterInput {
  fromDate: DateString
  checkInFromDate: DateString
  toDate: DateString
  facilityId: Int
  roomTypeId: Int
  roomId: Int
  cancelled: Boolean
  block: Boolean
  checkedIn: Boolean
  checkedOut: Boolean
  stayConfirmed: Boolean
  status: String
  bookingTypeId: Int
  salesChannel: BookingSearchSalesChannel
  mailRequest: BookingListMailRequestType
  hasPendingCancelFee: Boolean
  includeInvoiced: Boolean
  remarks: String
  clientId: Int
  keyword: String
}

enum BookingSearchSalesChannel {
  MemberWeb
  OTA
  PMS
  Jaran
  Rakuten
  Ikkyu
}

enum BookingListMailRequestType {
  Any
  BookingCertificate
  FacilityGuide
  PointCertificate
  Ads
}

input MyBookingListFilterInput {
  checkInDateFrom: DateString
  checkInDateTo: DateString
  checkOutDateFrom: DateString
  checkOutDateTo: DateString
  cancelled: Boolean
  contractId: Int
  bookingTypeId: Int
}

type BookingKeywordSearchPaginatedResponse {
  items: [BookingKeywordSearchResponse!]!
  total: Int!
  hasMore: Boolean!
}

type BookingKeywordSearchResponse {
  id: Int!
  bookingGroupId: Int!
  bookingTypeId: Int!
  bookingTypeCode: String!
  checkInDate: DateString!
  roomId: Int!
  roomName: String!
  roomTypeId: Int!
  roomTypeName: String!
  facilityId: Int!
  facilityName: String!
  representativeName: String
  clientId: Int
  memberId: String
  keywordHitIn: String!
}

input BookingSearchKeywordFilterInput {
  keyword: String!
}

type ClientActionHistoryPaginatedResponse {
  items: [ClientActionHistory!]!
  total: Int!
  hasMore: Boolean!
}

input ListClientActionHistoryInput {
  status: StatusFilterClientActionHistoryType
  dateFrom: DateString
  dateTo: DateString
  clientId: Int
  staffId: Int
}

enum StatusFilterClientActionHistoryType {
  Todo
  Done
}

type OtherPublicDocType {
  id: Int!
  name: String!
}

type OtherPublicDoc {
  id: Int!
  docTypeId: String!
  docType: OtherPublicDocType
  fileName: String!
  url: String!
}

type UserGuide {
  id: Int!
  year: Int!
  url: String!
}

type VacationLife {
  id: Int!
  year: Int!
  month: String!
  url: String!
}

type ClientAnnualFeePaginatedResponse {
  items: [ClientAnnualFee!]!
  total: Int!
  hasMore: Boolean!
}

type ClientAnnualFee {
  id: Int!
  clientId: Int!
  client: Client!
  clientCharge: ClientCharge
  processedAt: DateTimeIso
  hasError: Boolean!
  remarks: String
  year: Int!
  month: Int!
  annualFee: Int!
  annualFeeTax: Int!
  membershipFee: Int!
  membershipFeeTax: Int!
  managementFee: Int!
  managementFeeTax: Int!
  hotspringFee: Int!
  hotspringFeeTax: Int!
  vsAnnualFee: Int!
  vsAnnualFeeTax: Int!
  isVsFee: Boolean!
}

input ClientAnnualFeeListFilterInput {
  year: Int
  month: Int
  hasProcessed: Boolean
  clientId: Int
  includeVs: Boolean = false
}

type CompanyMemberBookingPaymentPref {
  id: Int!
  name: String!
}

type ContractPurchaseReason {
  id: Int!
  name: String!
}

type NegotiationExitReason {
  id: Int!
  name: String!
}

type ParkingType {
  id: Int!
  name: String!
}

type ResponseSource {
  id: Int!
  name: String!
}

type NameOnlyEnumResponse {
  name: String!
}

type SeasonInterest {
  id: Int!
  name: String!
}

type Prefecture {
  id: Int!
  name: String!
}

type ParticipantType {
  id: Int!
  name: String!
}

type FacilityInterested {
  id: Int!
  name: String!
  order: Int!
}

type MyUserInfoDefault {
  name: String
  email: String
  tel: String
  mobile: String
  postalCode: String
  prefecture: String
  locality: String
  address1: String
  address2: String
}

type CsvReportResult {
  files: [CsvReportFile!]!
}

type CsvReportFile {
  fileName: String!
  downloadUrl: String!
}

type FacilityParkingReservationPaginatedResponse {
  items: [FacilityParkingReservation!]!
  total: Int!
  hasMore: Boolean!
}

input ListFacilityParkingReservationFilterInput {
  facilityId: Int
  fromDate: DateString
  toDate: DateString
}

type RentalItemReservationPaginatedResponse {
  items: [RentalItemReservation!]!
  total: Int!
  hasMore: Boolean!
}

input ListRentalItemReservationFilterInput {
  facilityId: Int
  fromDate: DateString
  toDate: DateString
}

type BookingInvoicePaginatedResponse {
  items: [BookingInvoice!]!
  total: Int!
  hasMore: Boolean!
}

input ClientBookingInvoiceListFilterInput {
  bookingId: Int
  bookingGroupId: Int
}

type BookingChangeHistory {
  id: Int!
  bookingId: Int!
  booking: Booking!
  fieldName: String!
  valueBefore: String!
  valueAfter: String!
  changedAt: DateTimeIso!
  changedById: Int
  changedBy: Staff
  changedMemberUserId: Int
  changedMemberUser: MemberUser
}

type WebNotification {
  id: Int!
  staffId: Int!
  staff: Staff!
  title: String!
  body: String!
  imageUrl: String
  showFromDate: DateString!
  showToDate: DateString!
  publishedAt: DateTimeIso
  important: Boolean!
  createdAt: DateTimeIso!
  hiddenAt: DateTimeIso
  status: String!
}

type WebNotificationPaginatedResponse {
  items: [WebNotification!]!
  total: Int!
  hasMore: Boolean!
}

input ListWebNotificationInput {
  published: Boolean = true
  includeHidden: Boolean = false
  inRange: Boolean
}

type FacilityParkingCancelWaitlistPaginatedResponse {
  items: [FacilityParkingCancelWaitlistResponse!]!
  total: Int!
  hasMore: Boolean!
}

type FacilityParkingCancelWaitlistResponse {
  id: Int!
  bookingId: Int!
  booking: Booking!
  facilityParkingId: Int!
  facilityParking: FacilityParking!
  fromDate: DateString!
  toDate: DateString!
  notifiedAt: DateTimeIso
  clientId: Int!
  client: Client!
  subMemberId: Int
  subMember: SubMember
  cancelledAt: DateTimeIso
  createdAt: DateTimeIso!
  notifyToType: String!
  notifyToName: String!
}

input FacilityParkingCancelWaitListFilterInput {
  inEffect: Boolean
  bookingId: Int
  clientId: Int
  facilityParkingId: Int
  facilityId: Int
  fromDate: DateString
  toDate: DateString
}

type FacilityParkingCancelWaitlistCountResponse {
  stayDate: DateString!
  count: Int!
}

input FacilityParkingCancelWaitListCountFilterInput {
  inEffect: Boolean
  facilityParkingId: Int
  facilityId: Int
  fromDate: DateString!
  toDate: DateString!
}

type BookingTicketTypePaginatedResponse {
  items: [BookingTicketType!]!
  total: Int!
  hasMore: Boolean!
}

input BookingTicketTypeListFilterInput {
  ticketNo: String
  isAvailable: Boolean
  clientId: Int
  hasIntendedClient: Boolean
}

type ClientSearchPaginatedResponse {
  items: [Client!]!
  total: Int!
  hasMore: Boolean!
}

input ClientSearchLoadInput {
  loadLastCampaign: Boolean = false
  loadLastAction: Boolean = false
}

input ClientFilterSearchInput {
  name: String
  nameKana: String
  clientIdFrom: Int
  clientIdTo: Int
  clientIds: [Int!]
  includeIndividual: Boolean = true
  includeCompany: Boolean = true
  companyRepresentativeName: String
  clientContactType: ClientContactType
  contactPostalCodes: [String!]
  contactPrefectures: [String!]
  contactLocalities: [String!]
  contactAddress1: String
  contactAddress2: String
  contactTel: String
  contactMobile: String
  contactFax: String
  contactEmail: String
  purchaseRates: [Int!]
  furtherPurchaseRates: [Int!]
  renewPurchaseRates: [Int!]
  includeDoNotContact: Boolean = true
  picIds: [Int!]
  memberIdFrom: String
  memberIdTo: String
  memberIds: [String!]
  membershipStatus: ClientMemberShipStatusType
  membershipCancellationDateFrom: DateString
  membershipCancellationDateTo: DateString
  hasProductTypeIds: [Int!]
  hasProductTypeIdsType: ClientFilterSearchOtherType = Any
  hasProductTypeIdsIncludeExpired: Boolean = true
  hasProductExpiringFromDate: DateString
  hasProductExpiringToDate: DateString
  doesNotHaveProductTypeIds: [Int!]
  lastActionDateFrom: DateString
  lastActionDateTo: DateString
  hasActionMethodIds: [Int!]
  hasActionMethodIdsType: ClientFilterSearchOtherType
  hasActionParticipants: [String!]
  hasActionParticipantsType: ClientFilterSearchOtherType
  hasActionWithActionType: Boolean
  campaignTimes: ClientCampaignTimeType
  lastCampaignId: Int
  lastResponseDateFrom: DateString
  lastResponseDateTo: DateString
  hasTrialStay: Boolean
  trialStay: ClientFilterSearchTrialStayInput
  remarks: String
  clientType: ClientType
  requestMemberMagazineMail: Boolean
  requestBrochureMail: Boolean
  mwYearFrom: Int
  mwYearTo: Int
  mwFacilityIds: [Int!]
  mwRoomTypeIds: [Int!]
  mwRanks: [MwRank!]
  mwWeekNos: [Int!]
  pwYearFrom: Int
  pwYearTo: Int
  pwFacilityIds: [Int!]
  pwRoomTypeIds: [Int!]
  pwWeekNos: [Int!]
  vmYearFrom: Int
  vmYearTo: Int
  vmFacilityIds: [Int!]
  vmRoomTypeIds: [Int!]
  onlyProductExpiring: OnlyProductExpiringInput
  createdFromDate: DateString
  createdToDate: DateString
  ageFrom: Int
  ageTo: Int
  gender: Gender
  campaignIds: [Int!]
  campaignGroups: [String!]
  facilitiesInterested: [String!]
  hasMultipleContracts: Boolean
  hasReferredClientIds: [Int!]
  brochureRequestType: ClientSearchRequestBrochureType
}

enum ClientMemberShipStatusType {
  OnlyCurrent
  All
  OnlyExMember
  NoCurrent
  ExceptExMember
  HasHadContract
  NeverHadContract
}

enum ClientFilterSearchOtherType {
  Any
  All
}

enum ClientCampaignTimeType {
  Once
  MoreThanOnce
}

input ClientFilterSearchTrialStayInput {
  fromDate: DateString!
  isCancelled: Boolean
}

input OnlyProductExpiringInput {
  productId: Int!
  dateFrom: DateString = "1900-01-01"
  dateTo: DateString = "3000-12-31"
}

enum ClientSearchRequestBrochureType {
  VSOnly
  VMOnly
  VSOrVM
  VSAndVM
}

type CampaignPaginatedResponse {
  items: [Campaign!]!
  total: Int!
  hasMore: Boolean!
}

input ListCampaignFilterInput {
  keyword: String
  dateFrom: DateString
  dateTo: DateString
  finished: Boolean
  hasAttachment: Boolean
  lastApplied: Boolean
}

input GetCampaignLoadInput {
  applyResponses: Boolean = false
  contracts: Boolean = false
}

type FacilityRevenueReportOutput {
  fromDatePrev: DateString!
  toDatePrev: DateString!
  occupancyRates: [FacilityRevenueReportOccupancyRate!]!
  paymentAmounts: [FacilityRevenueReportPaymentAmount!]!
  chargeSummaries: [FacilityRevenueReportChargeSummary!]!
}

type FacilityRevenueReportOccupancyRate {
  title: String!
  occupancyRate: Float!
  count: Int!
  occupancyRatePrev: Float!
  countPrev: Int!
}

type FacilityRevenueReportPaymentAmount {
  methodId: Int!
  title: String!
  amount: Int!
  amountPrev: Int!
}

type FacilityRevenueReportChargeSummary {
  typeId: Int!
  type: String!
  subject: String!
  totalWithSalesTax: Int!
  totalWithoutSalesTax: Int!
  totalSalesTax: Int!
  count: Int!
  totalWithSalesTaxPrev: Int!
  totalWithoutSalesTaxPrev: Int!
  totalSalesTaxPrev: Int!
  countPrev: Int!
}

type MonthlyRevenueSummary {
  facility: Facility!
  revenues: [MonthlyRevenue!]!
}

type MonthlyRevenue {
  title: String!
  amount: Int!
}

type ClientChangeHistoryPaginatedResponse {
  items: [ClientChangeHistory!]!
  total: Int!
  hasMore: Boolean!
}

type ClientChangeHistory {
  id: Int!
  clientId: Int!
  client: Client!
  memberUserId: Int
  memberUser: MemberUser
  fieldName: String!
  valueBefore: String!
  valueAfter: String!
  changedAt: DateTimeIso!
  changedById: Int
  changedBy: Staff
}

input ClientChangeHistoryListFilterInput {
  clientId: Int
  fieldName: String
}

type MyClientChargePaginatedResponse {
  items: [ClientCharge!]!
  total: Int!
  hasMore: Boolean!
}

type PointExchangePaginatedResponse {
  items: [PointExchange!]!
  total: Int!
  hasMore: Boolean!
}

input PointExchangeListFilterInput {
  clientId: Int
}

type PwContractUsageResult {
  rights: [PwContractUsageRight!]!
}

type PwContractUsageRight {
  year: Int!
  bookingGroup: BookingGroup!
  validity: PwRefundToContractPointValidity!
}

type PwRefundToContractPointValidity {
  year: Int!
  validFrom: DateString!
  validThru: DateString!
}

type MwContractUsageResult {
  id: Int!
  contractNumber: String
  clientId: Int!
  client: Client!
  productTypeId: Int!
  productType: ProductType!
  startDate: DateString
  endDate: DateString
  years: Int
  autoRenewal: Boolean
  basePoint: Int
  pointPrice: Int
  additionalPointPrice: Int
  mwExchangeFee: Int
  terminatedAt: DateTimeIso
  terminateReason: TerminateReason
  suspendedAt: DateTimeIso
  mwPwWeekNumber: Int
  mwPwRoomTypeId: Int
  mwPwRoomType: RoomType
  vmRoomTypeId: Int
  vmRoomType: RoomType
  vmTotalPrice: Int
  vmTotalPriceTvp: Int
  mwRank: MwRank
  startYear: Int
  pwSpContractId: Int
  pwSpContract: Contract
  campaignId: Int
  campaign: Campaign
  spFirstDate: DateString
  tentative: Boolean!
  loginAllowedDate: DateString
  vsFirstAnnualFeeDiscount: Int
  phaseId: Int
  phase: ContractPhase
  remarks: String
  responseSource: String
  contractPurchaseTypeId: Int
  contractPurchaseType: ContractPurchaseType
  contractPurchaseTypeDetailId: Int
  contractPurchaseTypeDetail: ContractPurchaseTypeDetail
  salesStaffId: Int
  salesStaff: Staff
  purchaseReason: String
  mainPurchasePurposeId: Int
  mainPurchasePurpose: ContractPurchasePurpose
  subPurchasePurposeId: Int
  subPurchasePurpose: ContractPurchasePurpose
  applicationDate: DateString
  applicationTypeId: Int
  applicationType: ContractApplicationType
  paymentExpectedDate: DateString
  paymentDate: DateString
  entranceFee: Int
  entranceFeeTax: Int
  memberRegistrationFee: Int
  memberRegistrationFeeTax: Int
  annualFee: Int
  annualFeeTax: Int
  managementFee: Int
  managementFeeTax: Int
  hotspringFee: Int
  hotspringFeeTax: Int
  paymentTotal: Int
  paymentTotalWithTax: Int
  paymentTotalTax: Int
  entranceFeeDiscount: Int
  entranceFeeDiscountTax: Int
  purchasePaymentMethodId: Int
  purchasePaymentMethod: ContractPurchasePaymentMethod
  receivedPayment: Int
  receivedPaymentDifference: Int
  accountingCheck: String
  totalPoint: Int
  transferredToContractId: Int
  transferredToContract: Contract
  expirationProcessedAt: DateTimeIso
  createdAt: DateTimeIso!
  deletedAt: DateTimeIso
  contractPoints: [ContractPoint!]!
  mwRights: [MwRight!]!
  attachments: [ContractAttachment!]!
  canCheckInUntil: DateString
  canCheckOutUntil: DateString
  status: String!
  pointSummary: [ContractPointSummaryResult!]!
  pointMovementList: [ContractPointMovement!]!
  vmStayRightDate: VmStayRightDate
  defaultMwExchangeFee: Int
  mwUsageRights(fromDate: DateString): [MwContractUsageYear!]!
  canCancelAutoRenewal: Boolean!
  rights: [MwContractUsageYear!]!
  stayRightPricePerDay: Float!
}

type VmContractUsageResult {
  id: Int!
  contractNumber: String
  clientId: Int!
  client: Client!
  productTypeId: Int!
  productType: ProductType!
  startDate: DateString
  endDate: DateString
  years: Int
  autoRenewal: Boolean
  basePoint: Int
  pointPrice: Int
  additionalPointPrice: Int
  mwExchangeFee: Int
  terminatedAt: DateTimeIso
  terminateReason: TerminateReason
  suspendedAt: DateTimeIso
  mwPwWeekNumber: Int
  mwPwRoomTypeId: Int
  mwPwRoomType: RoomType
  vmRoomTypeId: Int
  vmRoomType: RoomType
  vmTotalPrice: Int
  vmTotalPriceTvp: Int
  mwRank: MwRank
  startYear: Int
  pwSpContractId: Int
  pwSpContract: Contract
  campaignId: Int
  campaign: Campaign
  spFirstDate: DateString
  tentative: Boolean!
  loginAllowedDate: DateString
  vsFirstAnnualFeeDiscount: Int
  phaseId: Int
  phase: ContractPhase
  remarks: String
  responseSource: String
  contractPurchaseTypeId: Int
  contractPurchaseType: ContractPurchaseType
  contractPurchaseTypeDetailId: Int
  contractPurchaseTypeDetail: ContractPurchaseTypeDetail
  salesStaffId: Int
  salesStaff: Staff
  purchaseReason: String
  mainPurchasePurposeId: Int
  mainPurchasePurpose: ContractPurchasePurpose
  subPurchasePurposeId: Int
  subPurchasePurpose: ContractPurchasePurpose
  applicationDate: DateString
  applicationTypeId: Int
  applicationType: ContractApplicationType
  paymentExpectedDate: DateString
  paymentDate: DateString
  entranceFee: Int
  entranceFeeTax: Int
  memberRegistrationFee: Int
  memberRegistrationFeeTax: Int
  annualFee: Int
  annualFeeTax: Int
  managementFee: Int
  managementFeeTax: Int
  hotspringFee: Int
  hotspringFeeTax: Int
  paymentTotal: Int
  paymentTotalWithTax: Int
  paymentTotalTax: Int
  entranceFeeDiscount: Int
  entranceFeeDiscountTax: Int
  purchasePaymentMethodId: Int
  purchasePaymentMethod: ContractPurchasePaymentMethod
  receivedPayment: Int
  receivedPaymentDifference: Int
  accountingCheck: String
  totalPoint: Int
  transferredToContractId: Int
  transferredToContract: Contract
  expirationProcessedAt: DateTimeIso
  createdAt: DateTimeIso!
  deletedAt: DateTimeIso
  contractPoints: [ContractPoint!]!
  mwRights: [MwRight!]!
  attachments: [ContractAttachment!]!
  canCheckInUntil: DateString
  canCheckOutUntil: DateString
  status: String!
  pointSummary: [ContractPointSummaryResult!]!
  pointMovementList: [ContractPointMovement!]!
  vmStayRightDate: VmStayRightDate
  defaultMwExchangeFee: Int
  mwUsageRights(fromDate: DateString): [MwContractUsageYear!]!
  canCancelAutoRenewal: Boolean!
  rights: [VmContractUsageYear!]!
}

type VmContractUsageYear {
  year: Int!
  bookingGroup: BookingGroup!
  vmStayRights: [VmStayRight!]!
}

type VmStayRight {
  id: Int!
  contractId: Int!
  contract: Contract!
  stayDate: DateString!
  price: Int!
  tvpRefunded: Int
  revokedAt: DateTimeIso
}

type TVPHistoryPaginatedResponse {
  items: [TVPHistory!]!
  total: Int!
  hasMore: Boolean!
}

type TVPHistory {
  id: Int!
  clientId: Int!
  client: Client!
  changeReason: String
  pointChange: Int!
  pointsBefore: Int!
  pointsAfter: Int!
  bookingChargeId: Int
  bookingCharge: BookingAdditionalCharge
  bookingPaymentId: Int
  bookingPayment: BookingPayment
  pointExchangeId: Int
  pointExchange: PointExchange
  staffId: Int
  staff: Staff
  current: Boolean!
  remarks: String
  createdAt: DateTimeIso!
}

type CancelWaitListPaginatedResponse {
  items: [CancelWaitListResponse!]!
  total: Int!
  hasMore: Boolean!
}

type CancelWaitListResponse {
  id: Int!
  type: CancelWaitListType!
  roomTypeId: Int!
  roomType: RoomType!
  checkInDate: DateString!
  checkOutDate: DateString!
  notifiedAt: DateTimeIso
  clientId: Int!
  client: Client!
  subMemberId: Int
  subMember: SubMember
  cancelledAt: DateTimeIso
  createdAt: DateTimeIso!
  notifyToType: String!
  notifyToName: String!
}

enum CancelWaitListType {
  Member
  MW
}

input CancelWaitListFilterInput {
  inEffect: Boolean
  clientId: Int
}

type MyCancelWaitListPaginatedResponse {
  items: [CancelWaitList!]!
  total: Int!
  hasMore: Boolean!
}

type CancelWaitList {
  id: Int!
  type: CancelWaitListType!
  roomTypeId: Int!
  roomType: RoomType!
  checkInDate: DateString!
  checkOutDate: DateString!
  notifiedAt: DateTimeIso
  clientId: Int!
  client: Client!
  subMemberId: Int
  subMember: SubMember
  cancelledAt: DateTimeIso
  createdAt: DateTimeIso!
}

type CancelWaitlistCountResponse {
  stayDate: DateString!
  count: Int!
}

input CancelWaitListCountFilterInput {
  inEffect: Boolean
  facilityId: Int
  roomTypeId: Int
  fromDate: DateString!
  toDate: DateString!
}

type CampaignApplyResponsePaginatedResponse {
  items: [CampaignApplyResponse!]!
  total: Int!
  hasMore: Boolean!
}

input CampaignApplyResponseListFilterInput {
  clientId: Int
}

type ClientChargePaginatedResponse {
  items: [ClientCharge!]!
  total: Int!
  hasMore: Boolean!
}

input ClientChargeListFilterInput {
  clientId: Int!
}

type SignupBonusApplicationPaginatedResponse {
  items: [SignupBonusApplication!]!
  total: Int!
  hasMore: Boolean!
}

type SignupBonusApplication {
  id: Int!
  contractId: Int!
  contract: Contract!
  signupBonusId: Int!
  signupBonus: SignupBonus!
  handledAt: DateTimeIso
  handledById: Int
  handledBy: Staff
  createdAt: DateTimeIso!
}

type SignupBonus {
  id: Int!
  status: SignupBonusStatus!
  name: String!
  startDate: DateString!
  endDate: DateString!
  type: SignupBonusType!
  description: String!
  amount: Int
  vsPromoCode: String
  vsPromoDiscount: Int!
  vsPromoTVP: Int!
  createdById: Int
  createdBy: Staff
  computed: SignupBonusComputed
  vsBonuses: String!
  vsBonusValues: String!
}

enum SignupBonusStatus {
  Active
  Ended
}

type SignupBonusComputed {
  id: Int!
  clientCount: Int!
  contractCount: Int!
}

input ListSignupBonusApplicationFilterInput {
  contractId: Int
  signupBonusId: Int
  keyword: String
  handled: Boolean
}

type SignupBonusPaginatedResponse {
  items: [SignupBonus!]!
  total: Int!
  hasMore: Boolean!
}

input SignupBonusListFilterInput {
  status: SignupBonusStatus
  keyword: String
}

type WebRequestPaginatedResponse {
  items: [WebRequest!]!
  total: Int!
  hasMore: Boolean!
}

input WebRequestListFilterInput {
  clientId: Int
  type: WebRequestType
  forVs: Boolean
  forVm: Boolean
  hasPic: Boolean
  clientAssigned: Boolean
  handled: Boolean
  keyword: String
}

input PossiblyDuplicatedClientInput {
  isCompany: Boolean
  companyName: String
  firstName: String
  lastName: String
  tel: String
  telMobile: String
  postalCode: String
  birthday: DateString
}

type DuplicatedClientPaginatedResponse {
  items: [DuplicatedClientListResult!]!
  total: Int!
  hasMore: Boolean!
}

type DuplicatedClientListResult {
  type: DuplicatedClientType!
  baseInfo: DuplicatedBaseInfo!
  duplicatedItems: [DuplicatedClient!]!
  id: Int!
  createdAt: DateTimeIso!
  webRequest: WebRequest
  vsApplication: VsApplication
}

enum DuplicatedClientType {
  Brochure
  TrialStay
  Visit
  OnlineCounseling
  VS
}

type DuplicatedBaseInfo {
  isCompany: Boolean!
  name: String!
  email: String
  birthday: DateString
  tel: String
  telMobile: String
  memberId: String
  postalCode: String
  prefecture: String
  locality: String
  address1: String
  address2: String
}

type DuplicatedClient {
  client: Client!
  duplicatedFields: [DuplicatedField!]!
}

type DuplicatedField {
  name: String!
  baseValue: String!
  duplicatedValue: String!
}

type VsApplication {
  id: Int!
  contractId: Int!
  contract: Contract!
  isCompany: Boolean!
  companyName: String
  companyNameKana: String
  companyPicDepartment: String
  companyPicTitle: String
  companyPicName: String
  companyPicKana: String
  lastName: String
  lastKana: String
  firstName: String
  firstKana: String
  sex: Gender
  birthday: DateString
  tel: String
  telMobile: String
  email: String
  postalCode: String
  prefecture: String
  locality: String
  address1: String
  address2: String
  promoCode: String
  signupBonusId: Int
  signupBonus: SignupBonus
  possiblyDuplicated: Boolean!
  password: String!
  duplicationCheckPassed: Boolean
  createdAt: DateTimeIso!
  media: String
  name: String!
}

type FacilityHotelTaxReportResult {
  header: FacilityHotelTaxReportHeaderResult!
  days: [FacilityHotelTaxReportDayResult!]!
}

type FacilityHotelTaxReportHeaderResult {
  values: [FacilityHotelTaxReportValueResult!]!
  total: Int!
}

type FacilityHotelTaxReportValueResult {
  amount: Int!
  count: Int!
}

type FacilityHotelTaxReportDayResult {
  values: [FacilityHotelTaxReportValueResult!]!
  total: Int!
  day: Int!
}

type EmailTemplate {
  key: String!
  subject: String!
  body: String!
  remarks: String
  category1: String
  category2: String
  category3: String
}

type MyExpiringRightsResult {
  rights: [MyExpiringRightData!]!
}

type MyExpiringRightData {
  contractId: Int!
  text: String!
  expireDate: DateString!
}

type MwRightPaginatedResponse {
  items: [MwRightExpired!]!
  total: Int!
  hasMore: Boolean!
}

type MwRightExpired {
  contractId: Int!
  contract: Contract!
  expireDate: DateString!
  depositType: String!
  year: Int!
}

input ExpiringMwRightsFilterInput {
  year: Int!
  month: Int!
  toYear: Int!
  toMonth: Int!
}

type ContractPointPaginatedResponse {
  items: [ExpiringPointRightResult!]!
  total: Int!
  hasMore: Boolean!
}

type ExpiringPointRightResult {
  year: Int!
  validThru: DateString!
  pointRemains: Int!
  contractId: Int!
  contract: Contract!
}

input ExpiringContractPointsFilterInput {
  year: Int!
  month: Int!
  toYear: Int!
  toMonth: Int!
  productTypeId: Int!
}

type Mutation {
  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates StaffRole entity row.
  #       Returns created entity row
  #
  createStaffRole(data: CreateStaffRoleInput!): StaffRole!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates StaffRolePermission entity row.
  #       Returns created entity row
  #
  createStaffRolePermission(
    data: CreateStaffRolePermissionInput!
  ): StaffRolePermission!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates StaffRole entity row by id
  #
  updateStaffRole(data: UpdateStaffRoleInput!, id: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates StaffRolePermission entity row by id.
  #       Returns updates entity row
  #
  updateStaffRolePermission(
    data: UpdateStaffRolePermissionInput!
    id: Int!
  ): StaffRolePermission!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes StaffRole entity row.
  #       Returns deleted entity row
  #
  deleteStaffRole(id: Int!): StaffRole!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes StaffRolePermission entity ro by id.
  #       Returns deleted entity row
  #
  deleteStaffRolePermission(id: Int!): StaffRolePermission!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates Staff entity row by id.
  #       Returns updated Staff entity row
  #
  updateStaff(data: UpdateStaffInput!, id: Int!): Staff!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes Staff entity row by id.
  #       Returns deleted entity row
  #
  deleteStaff(id: Int!): Staff!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates Staff entity row.
  #       Returns created entity row
  #
  createStaff(data: CreateStaffInput!): Staff!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates Facility entity row by id.
  #       Returns updated entity row
  #
  updateFacility(data: UpdateFacilityInput!, id: Int!): Facility!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates Facility entity row's public info.
  #       Returns updated entity row
  #
  updatePublicFacilityInfo(
    data: UpdatePublicFacilityInfoInput!
    facilityId: Int!
  ): Facility!

  #
  #       [AUTH_RULE]: [StaffAdminAuthorized]
  #       Sets Facility entity row's rakutsu credentials (hotel code, password and booking select interval)
  #
  setFacilityRakutsuCredentials(
    facilityId: Int!
    rakutsuHotelCode: String
    rakutsuHotelPassword: String
    rakutsuSelectBookingIntervalMinutes: Int
  ): Facility!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates Facility entity row.
  #       Returns created entity row
  #
  createFacility(data: CreateFacilityInput!): Facility!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes Facility entity row by id.
  #       Returns deleted entity row
  #
  deleteFacility(id: Int!): Facility!

  #
  #       [AUTH_RULE]: [StaffAdminAuthorized]
  #       Deletes Facility entity row's rakutsu credentials (hotel code, password and sets booking select interval).
  #       Returns matched Facility entity row
  #
  deleteFacilityRakutsuCredentials(facilityId: Int!): Facility!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes Department entity row by id.
  #       Returns deleted entity row
  #
  deleteDepartment(id: Int!): Department!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates Department entity row by id.
  #       Returns updated entity row
  #
  updateDepartment(data: UpdateDepartmentInput!, id: Int!): Department!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates Department entity row.
  #       Returns created entity row
  #
  createDepartment(data: CreateDepartmentInput!): Department!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Returns StaffToken entity row by token
  #
  checkConfirmEmailTokenStaff(token: String!): StaffToken!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Confirms email and sets new password for Staff entity row
  #
  confirmEmailStaff(data: ConfirmEmailStaffInput!): Boolean!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Requests Multi-Factor Authentication for Staff. Sends email letter for Staff entity.
  #       Returns token, token type and validity time of current StaffToken entity row
  #
  requestMFAStaff(password: String!, email: String!): StaffRequestMfaResponse!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Confirms Multi-Factor Authentication by token and code.
  #       Returns refresh token, access token, Staff entity row, role, role permissions and whether password change is required
  #
  confirmMFAStaff(code: String!, token: String!): StaffLoginResponse!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Generates access token from refresh token.
  #       Returns refresh token, access token, Staff entity row, role, role permissions and whether password change is required
  #
  refreshStaffToken(refreshToken: String!): StaffLoginResponse!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Creates StaffToken entity row and send a letter with token code.
  #       Returns token, token validity date time and sent email address
  #
  requestResetPasswordStaff(email: String!): StaffRequestResetPasswordResponse!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Sets new password by token, code.
  #       Returns refresh token, access token, Staff entity row, role, role permissions and whether password change is required
  #
  confirmResetPasswordStaff(
    token: String!
    password: String!
    code: String!
  ): StaffLoginResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates a client by id.
  #       Returns updated Client entity
  #
  updateClient(
    contacts: [UpdateContactInput!]
    data: UpdateClientInput!
    id: Int!
  ): Client!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates a MemberUser entity by client id.
  #       Returns updated Client entity
  #
  updateMemberUser(
    clientId: Int!
    mainUser: MainUserInput!
    clientInfo: ClientInfoInput!
    subMembers: [SubMemberInput!]!
  ): Client!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates a Client type by client id.
  #       Returns a Client entity
  #
  updateClientType(type: ClientType!, clientId: Int!): Client!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Updates current Client entity info.
  #       Returns updated entity row
  #
  updateMyClientInfo(
    facilityFeePayment: FeePaymentType
    setupFeePayment: FeePaymentType
    optionalCleaningPayment: FeePaymentType
    taxPayment: FeePaymentType
    otherServicePayment: FeePaymentType
  ): Client!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes client by id
  #
  deleteClient(id: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes duplicated client by id
  #
  deleteDuplicatedClient(
    originalClientId: Int!
    duplicatedClientId: Int!
  ): Boolean!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Sends email letter to the client with code.
  #       Returns valid until, mfa response type and token
  #
  requestMFAClient(
    email: String!
    password: String!
    vsIntent: Boolean = false
  ): ClientRequestMfaResponse!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Confirms MFA by token and code.
  #       Returns client access token, refresh token, role, user member id
  #
  confirmMFAClient(code: String!, token: String!): ClientLoginResponse!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Confirms client change password request.
  #       Returns client access token, refresh token, role, user member id
  #
  confirmChangePasswordClient(
    code: String!
    password: String!
    token: String!
  ): ClientLoginResponse!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Generates new client access token by refresh token.
  #       Returns client access token, refresh token, role, user member id
  #
  refreshClientToken(refreshToken: String!): ClientLoginResponse!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Checks for token validity.
  #       Returns MemberUserToken entity row
  #
  checkConfirmEmailTokenClient(token: String!): MemberUserToken!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Confirms client email, sets new password for client and invalidates current token.
  #       Returns client access token, refresh token, role, user member id
  #
  confirmEmailClient(data: ConfirmEmailClientInput!): ClientLoginResponse!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Sends a email to the client to reset password
  #
  requestResetPasswordClient(
    email: String!
  ): ClientRequestResetPasswordResponse!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Confirms client "reset password" request
  #
  confirmResetPasswordClient(
    token: String!
    password: String!
    code: String!
  ): ClientLoginResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Sends a email to the client to reset password by client id
  #
  requestResetPasswordClientForStaff(clientId: Int!, newEmail: String): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates StaffRolePermissionLevel entity row (links StaffRole with StaffRolePermission with permission level).
  #       Returns created entity row
  #
  createStaffRolePermissionLevel(
    data: CreateStaffRolePermissionLevelInput!
  ): StaffRolePermissionLevel!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates RoomType entity row.
  #       Returns created entity row
  #
  createRoomType(data: CreateRoomTypeInput!): RoomType!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates RoomType entity row by id.
  #       Returns updated entity row
  #
  updateRoomType(data: UpdateRoomTypeInput!, id: Int!): RoomType!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes RoomType entity row by id.
  #       Returns deleted entity row
  #
  deleteRoomType(id: Int!): RoomType!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates Room entity row.
  #       Returns created entity row
  #
  createRoom(data: CreateRoomInput!): Room!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates Room entity row.
  #       Returns updated entity row
  #
  updateRoom(data: UpdateRoomInput!, id: Int!): Room!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes Room entity row by id.
  #       Retruns deleted entity row
  #
  deleteRoom(id: Int!): Room!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes RentalItem entity row by id
  #
  deleteRentalItem(id: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates RentalItem entity row by id
  #
  updateRentalItem(data: UpdateRentalItemInput!, id: Int!): RentalItem!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates RentalItem entity row.
  #       Returns created entity row
  #
  createRentalItem(data: CreateRentalItemInput!): RentalItem!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates SaleItem entity row by id.
  #       Returns updated entity row
  #
  updateSaleItem(data: UpdateSaleItemInput!, id: Int!): SaleItem!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates FacilityParking entity row.
  #       Returns created entity row
  #
  createFacilityParking(data: CreateFacilityParkingInput!): FacilityParking!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates FacilityParking entity row by id
  #
  updateFacilityParking(
    data: UpdateFacilityParkingInput!
    id: Int!
  ): FacilityParking!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes FacilityParking entity row by id.
  #       Returns created entity row
  #
  deleteFacilityParking(id: Int!): FacilityParking!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates FacilityHotelTax entity row.
  #       Returns updated entity row
  #
  updateFacilityHotelTax(
    data: UpdateFacilityHotelTaxInput!
    id: Int!
  ): FacilityHotelTax!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates FacilityHotelTax entity row,
  #       Returns created entity row
  #
  createFacilityHotelTax(data: CreateFacilityHotelTaxInput!): FacilityHotelTax!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes FacilityHotelTax entity row,
  #       Returns deleted entity row
  #
  deleteFacilityHotelTax(id: Int!): FacilityHotelTax!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes FacilityHotelTaxAmount entity row.
  #       Returns deleted entity row
  #
  deleteFacilityHotelTaxAmount(id: Int!): FacilityHotelTaxAmount!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates FacilityHotelTaxAmount entity row by id.
  #       Returns updated entity row
  #
  updateFacilityHotelTaxAmount(
    data: UpdateFacilityHotelTaxAmountInput!
    id: Int!
  ): FacilityHotelTaxAmount!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates FacilityHotelTaxAmount  entity row.
  #       Returns created entity row
  #
  createFacilityHotelTaxAmount(
    data: CreateFacilityHotelTaxAmountInput!
  ): FacilityHotelTaxAmount!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes SubMember entity row by id
  #
  deleteSubMember(id: Int!): Boolean!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Deletes SubMember entity row by id that belongs to current client
  #
  deleteMySubMember(id: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates SubMember entity row by id.
  #       Returns updated entity row
  #
  updateSubMember(data: UpdateSubMemberInput!, id: Int!): SubMember!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Updates SubMember entity row by id that belongs to current client.
  #       Returns updated entity row
  #
  updateMySubMemberAccount(
    subMemberTypeId: Int!
    basicInfo: BaseInfoMySubMemberCreateInput
    memberUser: MemberUserMyCreateInput
    id: Int!
  ): SubMember!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates SubMember entity row.
  #       Returns created entity row
  #
  createSubMember(data: CreateSubMemberInput!, clientId: Int!): SubMember!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Creates SubMember entity row for current client
  #
  createMySubMemberAccount(
    subMemberTypeId: Int!
    basicInfo: BaseInfoMySubMemberCreateInput
    memberUser: MemberUserMyCreateInput
  ): SubMember!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Removes ClientContact entity row by id.
  #       Returns removed ClientContact entity row
  #
  deleteClientContact(id: Int!): ClientContact!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates ClientContact entity row by id.
  #       Returns updated ClientContact entity row
  #
  updateClientContact(data: UpdateClientContactInput!, id: Int!): ClientContact!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Updates main contact (ClientContact entity row) of current client.
  #       Returns updated ClientContact entity row
  #
  updateMyMainContact(
    postalCode: String
    prefecture: String
    locality: String
    address1: String
    address2: String
    tel: String
    email: String
    mobile: String
  ): ClientContact!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates ClientContact entity row.
  #       Returns created entity row
  #
  createClientContact(data: CreateClientContactInput!): ClientContact!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates Inventory entity rows by specified arguments.
  #       Returns number of updated entity rows
  #
  updateInventory(data: UpdateInventoryInput!): UpdateInventoryResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates Inventory entity rows by specified fields.
  #       Returns number of updated inventories
  #
  setInventory(
    inventoryTypeTo: Int!
    changeFrom: [ChangeFromInventoryInput!]!
  ): UpdateInventoryResult!
  createContract(
    pwSpContractId: Int
    endDate: DateString = "2031-07-31"
    startDate: DateString = "2021-08-01"
    producTypeId: ProductTypeId!
    clientId: Int!
  ): Contract!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates Contract entity row with 'VS' product type.
  #       Returns created Contract entity row
  #
  createVsContract(clientId: Int!): Contract!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates ContractAttachment entity row by contract id, file name and file key.
  #       Returns created entity row
  #
  createContractAttachment(
    contractId: Int!
    fileName: String!
    fileKey: String!
  ): ContractAttachment!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes ContractAttachment entity row by id
  #
  deleteContractAttachment(id: Int!): ContractAttachment!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates and returns created booking
  #
  createBookingV4(
    representativeClientId: Int
    representativeSubMemberId: Int
    representativeName: String
    representativeKana: String
    representativeTel: String
    representativeEmail: String
    representativeCountry: String
    representativePostalCode: String
    representativePrefecture: String
    representativeAddress1: String
    representativeAddress2: String
    createdClientId: Int
    createdSubMemberId: Int
    checkInDate: DateString!

    # InventoryTypeId by every day. InventoryTypeId is not required only for POINT booking type
    days: [BookingDayInput!]!
    numberOfAdults: Int = 0
    numberOfChildren: Int = 0
    numberOfChildrenWithBedShare: Int = 0
    bookingGroupId: Int
    roomTypeId: Int!

    # Automatically determined from contract for SP/FP/DP/MO/VS
    bookingTypeId: Int
    contractId: Int
    clientId: Int
    bookingPlanId: Int
    force: Boolean = false
    parkings: [AddReservationFacilityParkingInput!]
    bookingBarNote: String
    priorityBooking: Boolean
    accommodationPoint: Int
    ticketId: String
    blockRoomId: Int
  ): Booking!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Creates a temporary booking
  #
  createTemporaryBookingGroup(
    roomTypeId: Int!
    bookingPlanId: Int
    contractId: Int!
    checkInDate: DateString!
    checkOutDate: DateString!
    rooms: [CreateTemporaryBookingRoomInput!]!
  ): BookingGroup!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Returns booking price calculation result (accommodation prices and fees by day)
  #
  calculateMyAccommodationPrice(
    contractId: Int
    roomTypeId: Int!
    checkInDate: DateString!
    checkOutDate: DateString!
    numberOfAdults: Int!
    numberOfChildren: Int!
    numberOfBedShare: Int!
    bookingPlanId: Int
    bookingId: Int
  ): PriceCalculationResultForClient!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Imports uploaded .csv file as:
  #       1. Schedules to the AccommodationPriceImport entity row if it is scheduled
  #       2. Imports immediately to the AccommodationPrice entity row if it is not scheduled
  #
  uploadCsvAccommodationPrice(
    data: AccommodationPricesCSVUploadInput!
  ): AccommodationPriceUploadCsvResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates AccommodationPrice entity row by specified room type id and date range.
  #       Returns updated entity rows
  #
  updateAccommodationPrice(
    data: UpdateAccommodationPriceInput!
  ): [AccommodationPrice!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Cancels AccommodationPriceImport entity row by id
  #
  cancelScheduledAccommodationPrice(id: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates AccommodationPrice entity row by room type id and date with specified columns
  #
  updateAccommodationPriceCells(
    toPrice: Int!
    cells: [UpdateAccommodationPriceCellsInput!]!
  ): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Rollovers points from specified year and contract id
  #
  rolloverPoints(
    year: Int!
    points: Int!
    contractId: Int!
    totalFeeOverride: Int
    remarks: String
  ): Boolean!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Rollovers points from specified year and contract id for current client.
  #       Returns Receipt entity row for current operation
  #
  rolloverMyPoints(
    password: String!
    year: Int!
    points: Int!
    contractId: Int!
  ): ContractPointOperationResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Advances points for specified year and contract id
  #
  advancePoints(
    year: Int!
    points: Int!
    contractId: Int!
    totalFeeOverride: Int
    remarks: String
  ): Boolean!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Advances points for specified year and contract id for current client.
  #       Returns Receipt entity row for current operation
  #
  advanceMyPoints(
    password: String!
    year: Int!
    points: Int!
    contractId: Int!
  ): ContractPointOperationResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Purchases points from specified year and contract id
  #
  purchasePoints(
    year: Int!
    points: Int!
    contractId: Int!
    pointPriceOverride: Int
    reason: GrantReason
    remarks: String
  ): Boolean!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Purchases points from specified year and contract id for current client.
  #       Returns Receipt entity row for current operation
  #
  purchaseMyPoints(
    password: String!
    year: Int!
    points: Int!
    contractId: Int!
  ): ContractPointOperationResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates contract point duration (from and to validity) by id
  #
  updateContractPointDuration(
    validThru: DateString!
    validFrom: DateString!
    id: Int!
  ): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Subtracts specified points from specified contract by id
  #
  subtractCurrentContractPoint(
    exceptionalReason: String!
    points: Int!
    contractId: Int!
  ): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates ClientComment entity row.
  #       Returns created entity row
  #
  createClientComment(clientId: Int!, comment: String!): ClientComment!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates ClientComment entity row by comment id.
  #       Returns updated entity row
  #
  updateClientComment(commentId: Int!, comment: String!): ClientComment!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes ClientComment entity row by id.
  #       Returns deleted ClientComment entity
  #
  deleteClientComment(id: Int!): ClientComment!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Makes parking reservations (creates FacilityParkingReservation entity rows) for booking id.
  #       Returns created FacilityParkingReservation entity rows
  #
  addParkingReservation(
    parkings: [AddReservationFacilityParkingInput!]!
    bookingId: Int!
  ): [FacilityParkingReservation!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Cancels (sets cancelledAt field to current date) FacilityParkingReservation entity row by id
  #
  cancelParkingReservation(
    facilityParkingReservationId: Int!
  ): FacilityParkingReservation!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates FacilityParkingReservation entity row block field to true by id.
  #       Returns updated entity row
  #
  blockParkingReservation(
    data: FacilityParkingReservationBlockInput!
  ): FacilityParkingReservation!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates FacilityParkingReservation and FacilityParkingCancelWaitlist entities rows
  #
  updateParkingReservationBulk(
    waitLists: [UpdateFacilityParkingWaitListInputCombined!]!
    reservations: [UpdateFacilityParkingReservationInput!]!
  ): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates FacilityParkingReservation entity row by id.
  #       Returns updated entity row
  #
  updateParkingReservation(
    data: UpdateFacilityParkingReservationInput!
  ): FacilityParkingReservation!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Updates client's booking parkings data by id
  #
  updateMyBookingParking(
    parkings: [UpdateMyFacilityParkingReservationInput!]!
    bookingId: Int!
  ): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Adds reservation of rental items to the booking by id
  #
  addRentalItemReservation(
    rentalItems: [AddReservationRentalItemInput!]!
    bookingId: Int!
  ): [RentalItemReservation!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates RentalItemReservation entity row by id.
  #       Returns updated entity row
  #
  updateRentalItemReservation(
    data: UpdateReservationRentalItemInput!
  ): RentalItemReservation!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates RentalItemReservation entity row with block property.
  #       Returns created entity row
  #
  blockRentalItemReservation(
    rentalItemId: Int!
    fromDate: DateString!
    toDate: DateString!
    note: String
    quantity: Int!
  ): RentalItemReservation!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Updates RentalItemReservation entity rows by id of booking by booking id
  #
  updateMyBookingRentalItems(
    rentalItems: [UpdateMyRentalItemInput!]!
    bookingId: Int!
  ): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates BookingPlan entity row with specified data
  #
  createBookingPlan(data: CreateBookingPlanInput!): BookingPlan!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates RentalItemDef entity row.
  #       Returns created entity row
  #
  createRentalItemDef(data: CreateRentalItemDefInput!): RentalItemDef!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates RentalItemDef entity row by id.
  #       Returns updates entity row
  #
  updateRentalItemDef(data: UpdateRentalItemDefInput!, id: Int!): RentalItemDef!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Sets disabled status for BookingTicket entity row by id
  #
  disableBookingTicket(disabled: Boolean!, ticketId: String!): BookingTicket!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates BookingTicket entity row's notes by id
  #
  updateBookingTicketType(id: String!, notes: String!): BookingTicketType!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates BookingTicket entity row from ticket id.
  #       Returns created entity row
  #
  useTicketToBook(bookingTicketData: UseBookingTicketInput!): BookingTicket!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Cancels ticket booking by id.
  #       Returns cancelled Booking entity row
  #
  cancelTicketBooking(bookingId: Int!): Booking!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Registers email to booking ticket by ticket number and secret
  #
  registerEmailToBookingTicket(data: BookingTicketRegisterEmailInput!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates BookingTicket entity rows
  #
  createBookingTickets(ticketData: CreateBookingTicketInput!): [BookingTicket!]!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Generates upload url that can be used for future uploading files to S3 bucket.
  #       Returns generated url info
  #
  generatePassportUploadUrl(
    contentType: String!
    contentLength: Int!
    fileName: String
    bookingId: Int!
    code: String!
  ): GenerateUploadUrlResult!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Generates upload url that can be used for future uploading files to S3 bucket.
  #       Returns generated url info
  #
  generateMyUploadUrl(
    contentType: String!
    contentLength: Int!
    fileName: String
    type: ClientAllowedUploadType!
  ): GenerateUploadUrlResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Generates upload url that can be used for future uploading files to S3 bucket.
  #       Returns generated url info
  #
  generateUploadUrl(
    contentType: String!
    contentLength: Int!
    fileName: String
    type: String!
    targetEntityId: Int
  ): GenerateUploadUrlResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates BookingPlan entity row by id
  #
  updateBookingPlan(data: UpdateBookingPlanInput!, id: Int!): BookingPlan!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Marks the booking as checked in by id
  #
  checkInBooking(id: Int!): Booking!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Marks the booking as checked out by id
  #
  checkOutBooking(id: Int!): Booking!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Cancels marked booking check in by id
  #
  cancelCheckInBooking(id: Int!): Booking!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Cancels marked booking check out by id
  #
  cancelCheckOutBooking(id: Int!): Booking!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Updates guests information for booking by id
  #
  preCheckInMyBooking(
    data: [MyBookingPreCheckInFilterInput!]!
    bookingId: Int!
  ): Boolean!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Updates guests information for booking by id and code
  #
  preCheckInMyBookingNonLogin(
    data: [MyBookingPreCheckInFilterInput!]!
    code: String!
    bookingId: Int!
  ): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates a booking for deposit.
  #       Returns MW rights, booking accommodation prices and created booking
  #
  depositMwBooking(
    contractId: Int!
    year: Int!
    firstHalf: Boolean!
    latterHalf: Boolean!
    force: Boolean = false
  ): DepositRightsResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Exchanges deposited MwRight entity row.
  #       Returns matched MwRight, created BookingAccommodationPrice and created Booking entity rows
  #
  exchangeDepositedRight(
    data: ExchangeDepositedRightInput!
  ): ExchangeDepositedRightsResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Splits MwRight entity row by contract id, booking group id and bookings.
  #       Returns created BookingAccommodationPrice entity rows
  #
  splitMwRight(data: SplitMwRightInput!): [BookingAccommodationPrice!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Cancels booking by booking id with specified penalty rates.
  #       Returns cancelled booking and applied penalty rates, also new created bookings for VM and PW booking types.
  #
  cancelBooking(
    penaltyRates: [CancelPenaltyRateInput!]!
    bookingId: Int!
  ): BookingCancellationResult!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Cancels self booked booking by id, stay dates and use tvp (whether to use tvp points).
  #       Returns cancelled booking and applied penalty rates, also new created bookings for VM and PW booking types.
  #
  cancelMyBooking(
    bookingId: Int!
    stayDates: [DateString!]!
    password: String!
    useTvp: Int = 0
  ): BookingCancellationResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Sets Holiday entity rows by year and dates.
  #       Returns set entity rows
  #
  setHolidays(year: Int!, holidays: [HolidayInput!]!): [Holiday!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Extends booking by id, inventory id and stay days
  #
  extendBooking(bookingId: Int!, days: [BookingExtendDayInput!]!): Booking!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Extends self created booking by id and stay days. Requires client password.
  #
  extendMyBooking(
    password: String!
    bookingId: Int!
    days: [DateString!]!
  ): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates InventoryType entity row by id
  #
  updateNameAbbr(nameAbbr: String!, id: Int!): InventoryType!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates BookingInvoice entity row for booking group id
  #
  createBookingInvoices(
    createInvoiceData: CreateBookingInvoiceInput!
  ): BookingInvoice!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes BookingInvoice entity row by id
  #
  deleteBookingInvoices(deleteInvoiceData: DeleteBookingInvoiceInput!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates StaffGroup entity row.
  #       Returns created entity row
  #
  createStaffGroup(name: String!, staffIds: [Int!]): StaffGroup!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates StaffGroup entity row by id.
  #       Returns updated entity row
  #
  updateStaffGroup(id: Int!, name: String): StaffGroup!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Adds Staff entity rows to StaffGroup entity row.
  #       Returns matched StaffGroup entity row
  #
  addStaffsToGroup(staffIds: [Int!]!, staffGroupId: Int!): StaffGroup!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes Staff entity rows from StaffGroup entity row by id.
  #       Returns matched StaffGroup entity row
  #
  removeStaffsToGroup(staffIds: [Int!]!, staffGroupId: Int!): StaffGroup!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes StaffGroup entity row by id.
  #       Returns deleted entity row
  #
  deleteStaffGroup(id: Int!): StaffGroup!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Upserts FacilityDailyReportDetail entity row.
  #       Returns upserted entity row
  #
  confirmFacilityDailyReportDetail(
    byHq: Boolean = false
    data: ConfirmDetailRowFacilityDailyReportInput!
  ): FacilityDailyReportDetail!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates FacilityDailyReportDetailAttachment entity row and attaches it to the FacilityDailyReportDetail entity row.
  #       Returns created FacilityDailyReportDetailAttachment entity row
  #
  attachFileFacilityDailyReportDetail(
    byHq: Boolean = false
    data: AttachFileDetailRowFacilityDailyReportInput!
  ): FacilityDailyReportDetailAttachment!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Upserts FacilityDailyReport entity row with TVS facility daily report data.
  #       Returns upserted entity row
  #
  submitTVSFacilityDailyReport(
    data: SubmitTVSFacilityDailyReportInput!
  ): FacilityDailyReport!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Upserts FacilityDailyReport entity row with CNV facility daily report data.
  #       Returns FacilityDailyReportConversionDetail entity rows
  #
  submitCNVFacilityDailyReport(
    data: SubmitCNVFacilityDailyReportInput!
  ): [FacilityDailyReportConversionDetail!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Sets status for FacilityDailyReport by id.
  #       Returns matched entity row
  #
  confirmOrRejectFacilityDailyReportHQ(
    data: ConfirmRejectReportHqInput!
  ): FacilityDailyReport!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates TVS FacilityDailyReport entity row by id.
  #       Returns updated entity row
  #
  updateTVSFacilityReport(
    data: UpdateTVSFacilityDailyReportInput!
    reportId: Int!
  ): FacilityDailyReport!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates CNV FacilityDailyReport entity row by id.
  #       Returns updated entity row
  #
  updateCNVFacilityReport(
    data: UpdateCNVFacilityDailyReportInput!
    reportId: Int!
  ): FacilityDailyReport!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates Booking entity row's data by id.
  #       Returns updated entity row
  #
  bookingBasicUpdate(basicUpdateInput: BasicUpdateBookingInput!): Booking!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates booking guests info by id.
  #       Returns matched Booking entity row
  #
  bookingGuestUpdate(
    data: [BookingGuestWithScheduleInput!]!
    bookingId: Int!
  ): Booking!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Updates self booked booking guests info by id
  #
  updateMyBookingGuests(
    bookingId: Int!
    data: [UpdateMyBookingGuestDataInput!]!
    representative: UpdateMyBookingGuestDataInput!
    password: String!
  ): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Sets room id for booking by id.
  #       Returns new and old Room entity rows
  #
  allocateRoom(newRoomId: Int!, bookingId: Int!): AllocateRoomResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Confirms stay for booking.
  #       Returns confirmed Booking entity row
  #
  confirmStay(undo: Boolean, bookingId: Int!): Booking!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Confirms stay for self created booking.
  #       Returns confirmed Booking entity row
  #
  confirmMyStay(bookingId: Int!): Booking!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Confirms BookingGroup entity related bookings with additional data (guests, rental items, parking, parking request number, pet number, pet breed)
  #
  confirmBookingGroup(
    id: Int!
    bookings: [ConfirmBookingGroupBookingInput!]!
    requestSameRoom: Boolean!
    requestMailCertificate: Boolean!
    feePaymentType: FeePaymentType!
  ): Boolean!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Extends BookingGroup entity related bookings by id
  #
  extendBookingGroup(id: Int!): Boolean!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Updates parking requested number of self created booking
  #
  updateMyBooking(data: UpdateMyBookingInput!, bookingId: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates booking invoice .pdf on s3 bucket by booking invoice id.
  #       Returns matched BookingInvoice entity row and created .pdf url
  #
  createBookingInvoicePdf(
    createInvoicePdfData: CreateBookingInvoicePdfInput!
  ): BookingInvoiceCreatePdfResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates BookingAdditionalCharge entity row by booking id with stay date subject id, note, price and quantity.
  #       Returns created BookingAdditionalCharge entity row
  #
  createAdditionalCharge(
    bookingId: Int!
    stayDate: DateString!
    subjectId: Int!
    note: String!
    price: Int!
    quantity: Int!
  ): BookingAdditionalCharge!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Removes BookingAdditionalCharge entity row by id
  #
  deleteAdditionalCharge(chargeId: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates BookingAdditionalCharge entity row by id with data values: price, quantity, subject id and note
  #
  updateAdditionalCharge(
    subjectId: Int
    chargeId: Int!
    price: Int!
    quantity: Int!
    note: String
  ): BookingAdditionalCharge!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Sets new point for BookingAdditionalCharge entity row by id
  #
  updatePointAdditionalCharge(
    newPoint: Int!
    chargeId: Int!
  ): BookingAdditionalCharge!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Sends email letter to the client for booking stay
  #
  sendThanksForStay(bookingGroupId: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates addressee name and receipt for values of BookingInvoice entity row by id.
  #       Returns updated BookingInvoice entity row
  #
  updateBookingInvoices(
    updateInvoiceData: UpdateBookingInvoiceInput!
  ): BookingInvoice!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates Campaign entity row with specified data.
  #       Returns created entity row
  #
  createCampaign(campaignData: CreateCampaignInput!): Campaign!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates Campaign entity row with specified data by id.
  #       Returns updated entity row
  #
  updateCampaign(campaignData: UpdateCampaignInput!, id: Int!): Campaign!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates CampaignApplyResponse entity row with specified data.
  #       Returns created entity row
  #
  createCampaignApplyResponse(
    response: Boolean!
    clientId: Int!
    campaignId: Int!
  ): CampaignApplyResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates bulk CampaignApplyResponse entity rows with specified data.
  #       Returns created entity rows
  #
  createBulkCampaignApplyResponse(
    response: Boolean!
    clientIds: [Int!]!
    campaignId: Int!
  ): [CampaignApplyResponse!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates CampaignApplyResponse entity row's response.
  #       Returns updated entity row
  #
  updateCampaignApplyResponse(
    response: Boolean!
    id: Int!
  ): CampaignApplyResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Removes CampaignApplyResponse entity row by id.
  #       Returns removed entity row
  #
  deleteCampaignApplyResponse(id: Int!): CampaignApplyResponse!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Finalizes BookingInvoice entity row (sets emails that will be sent after finalize operation).
  #       Returns finalized BookingInvoice entity row
  #
  finalizeBookingInvoices(
    finalizeInvoiceData: FinalizeBookingInvoiceInput!
  ): BookingInvoice!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Resends email letter for BookingInvoice entity row by id
  #
  resendBookingInvoices(
    resendInvoiceData: FinalizeBookingInvoiceInput!
  ): Boolean!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Creates WebRequest, WebRequestMedia and Client entity rows.
  #       Returns created entity row
  #
  createWebRequest(
    medias: [WebRequestMediaInput!]
    data: WebRequestInput!
  ): WebRequest!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates WebRequest entity row with Brochure type and specified client id.
  #       Returns created entity row
  #
  createWebBrochureRequestToClient(
    clientId: Int!
    forVm: Boolean
    forVs: Boolean
    remarks: String
  ): WebRequest!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates Client entity eow from web request id.
  #       Returns created entity row
  #
  createClientWebRequest(webRequestId: Int!): Client!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Assigns client id to WebRequest entity row and creates CampaignApplyResponse entity rows.
  #       Returns matched WebRequest entity row
  #
  assignClientWebRequest(clientId: Int!, webRequestId: Int!): WebRequest!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates WebRequest entity row status by id.
  #       Returns updated entity row
  #
  updateWebRequestStatus(
    status: WebRequestStatus!

    # webRequestId
    webRequestId: Int!
  ): WebRequest!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates WebRequest entity row data (remarks, status, pic id) by id.
  #       Returns updated entity row
  #
  updateWebRequest(
    data: UpdateWebRequestInput!
    webRequestId: Int!
  ): WebRequest!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates EmailTemplate entity row by key.
  #       Returns updated entity row
  #
  updateEmailTemplate(
    key: String!
    subject: String!
    body: String!
    remarks: String
  ): EmailTemplate!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes RentalItemDef entity row by id
  #
  deleteRentalItemDef(id: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates FacilityBookingRemarks entity rows by facility id.
  #       Returns created entity rows
  #
  createFacilityBookingRemarks(
    data: [CreateFacilityBookingRemarksInput!]!
    facilityId: Int!
  ): [FacilityBookingRemarks!]!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Registers client credit card by token
  #       Returns created RegisteredCC entity row
  #
  clientSaveCard(token: String!): RegisteredCC!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Sends credit card registration request letter by clientId
  #
  sendCCRegisterRequest(clientId: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates CancelWaitList entity row.
  #       Return created entity row
  #
  createCancelWaitList(
    subMemberId: Int
    clientId: Int!
    checkOutDate: DateString!
    checkInDate: DateString!
    roomTypeId: Int!
    type: CancelWaitListType!
  ): CancelWaitList!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Creates CancelWaitList entity row.
  #       Returns created entity row
  #
  createMyCancelWaitList(
    checkOutDate: DateString!
    checkInDate: DateString!
    type: CancelWaitListType!
    roomTypeId: Int!
  ): CancelWaitList!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes CancelWaitList entity row.
  #       Returns deleted entity row
  #
  deleteCancelWaitList(id: Int!): CancelWaitList!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Deletes CancelWaitList entity row.
  #       Returns deleted entity row
  #
  deleteMyCancelWaitList(id: Int!): CancelWaitList!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates NonProductPrice entity rows from .csv file
  #
  uploadCsvNonProductPrice(data: NonProductPricesCSVUploadInput!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates SignupBonus entity row.
  #       Returns created entity row
  #
  createSignupBonus(data: CreateSignupBonusInput!): SignupBonus!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates SignupBonus entity row by id.
  #       Returns updated entity row
  #
  updateSignupBonus(data: UpdateSignupBonusInput!, id: Int!): SignupBonus!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates SignupBonusApplication entity row by signup bonus id and contract id.
  #       Returns created entity row
  #
  addSignupBonusApplication(
    signupBonusId: Int!
    contractId: Int!
  ): SignupBonusApplication!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes SignupBonusApplication entity row by id.
  #       Returns deletes entity row
  #
  deleteSignupBonusApplication(id: Int!): SignupBonusApplication!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns generated signup bonus vs promo code.
  #
  generateSignupBonusVsPromoCode: String!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Changes status of SignupBonusApplication entity row by id.
  #       Returns matched entity row
  #
  markAsHandledSignupBonusApplication(
    status: SignupBonusApplicationMarkStatus!
    id: Int!
  ): SignupBonusApplication!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Sends verification email letter to the assigned email
  #
  vsSignupEmailVerification(email: String!, isCompany: Boolean!): Boolean!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Verifies EmailVerification entity row for VS by token
  #
  vsSignupTokenInfo(token: String!): VsSignupTokenInfoResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates a client by VsApplication entity row by id
  #       Returns created entity row
  #
  vsSignupDuplicateCheck(vsApplicationId: Int!): VsApplication!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Creates Client with VS contract.
  #       Returns vs application id, creation result and created client id
  #
  vsSignupSubmitForm(data: SubmitFormVsSignupInput!): VsSignupSubmitFormResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Transfers contract ownership of vs application to the client by id.
  #       Returns matched VsApplication entity row
  #
  vsSignupTransferContractOwnership(
    newClientId: Int!
    vsApplicationId: Int!
  ): VsApplication!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates VM tentative Contract entity row.
  #       Returns created entity row
  #
  createVmTentativeContract(clientId: Int!): Contract!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates Booking entity rows with VM tentative contract.
  #       Returns created entity rows
  #
  createVmTentativeBookings(
    contractId: Int!
    roomTypeId: Int!
    years: Int!
    vmBookings: [CreateVmBookingInput!]!
  ): [Booking!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes Booking entity rows for specified VM contract by id
  #
  deleteVmTentativeBookings(contractId: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Confirms bookings with VM contract by id
  #
  convertIntoConfirmedContract(
    contractId: Int!
    roomTypeId: Int!
    years: Int!
    tvpPaymentAmount: Int!
    vmBookings: [CreateVmBookingInput!]!
  ): [Booking!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates CampaignGroup entity row
  #
  createCampaignGroup(value: String!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes CampaignGroup entity row by value
  #
  deleteCampaignGroup(value: String!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates WebRequest entity rows from uploaded .csv file
  #
  bulkWebRequest(file: Upload!): Boolean!
  testExistsS3(key: String!): Boolean!
  testHtml2Pdf(s3Key: String!, html: String!): String!
  testHandler(t: String!): Boolean!
  testRoomAvailability(
    bookingExceptionId: Int
    dates: [DateString!]!
    roomTypeId: Int!
  ): Boolean!
  createMwContract(
    createCalendar: Boolean = false
    roomTypeId: Int!
    clientId: Int!
  ): Contract!
  testBookingSend(bookingId: Int!): Boolean!
  createPwContract(
    createCalendar: Boolean = false
    roomTypeId: Int!
    spContractId: Int!
  ): Contract!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates a ClientActionHistory entity to record client action.
  #       Returns recorded ClientActionHistory entity
  #
  createClientActionHistory(
    data: CreateClientActionHistoryInput!
  ): ClientActionHistory!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates ClientActionHistory entity row by id.
  #       Returns updated ClientActionHistory entity
  #
  updateClientActionHistory(
    data: UpdateClientActionHistoryInput!
    id: Int!
  ): ClientActionHistory!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes ClientActionHistory record by id
  #
  deleteClientActionHistory(id: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates OtherPublicDoc entity row.
  #       Returns created entity row
  #
  createOtherPublicDoc(data: CreateOtherPublicDocInput!): OtherPublicDoc!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes OtherPublicDoc entity row by id
  #
  deleteOtherPublicDoc(id: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates UserGuide entity row.
  #       Returns created entity row
  #
  createUserGuide(data: CreateUserGuideInput!): UserGuide!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes UserGuide entity row by id
  #
  deleteUserGuide(id: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates VacationLife entity row.
  #       Returns created entity row
  #
  createVacationLife(data: CreateVacationLifeInput!): VacationLife!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes VacationLife entity row by id
  #
  deleteVacationLife(id: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns WebRequest entity row and Staff entity row as suggested client pic list
  #
  suggestClientPIC(
    webRequestIds: [Int!]!
    candidateStaffIds: [Int!]!
    maxClients: Int!
  ): [SuggestClientPicResult!]!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Confirms client's pic
  #
  confirmClientPIC(assignments: [ClientPicAssignmentInput!]!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes ClientAnnualFee entity row by id.
  #       Returns deleted entity row
  #
  deleteAnnualFee(id: Int!): ClientAnnualFee!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates ClientAnnualFee entity row by id
  #
  updateAnnualFee(
    id: Int!
    year: Int!
    month: Int!
    remarks: String!
    annualFee: Int!
    membershipFee: Int!
    managementFee: Int!
    hotspringFee: Int!
  ): ClientAnnualFee!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates ClientAnnualFee entity row by: clientId, year, month.
  #       Returns created entity row
  #
  createAnnualFee(
    clientId: Int!
    year: Int!
    month: Int!
    remarks: String!
    annualFee: Int!
    membershipFee: Int!
    managementFee: Int!
    hotspringFee: Int!
  ): ClientAnnualFee!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Processes ClientAnnualFee by ids.
  #       Returns number of processed and failed operations
  #
  processAnnualFee(ids: [Int!]!): ClientAnnualFeeProcessPaymentResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Removes Booking entity row by id.
  #       Returns removed entity row
  #
  removeBooking(bookingId: Int!): Booking!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Removes temporary BookingGroup and depended Booking entity rows
  #
  removeTemporaryBookingGroup(id: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates a client manually.
  #       Returns whether client is possibly duplicated or not
  #
  createClient(data: ManualCreateClientInput!): CreateClientResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates WebNotification entity row.
  #       Returns created entity row
  #
  createWebNotification(data: CreateWebNotificationInput!): WebNotification!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Hides WebNotification entity row by id
  #
  hiddenWebNotification(id: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deleted WebNotification entity row by id
  #
  deleteWebNotification(id: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates WebNotification entity row by id
  #
  updateWebNotification(
    data: UpdateWebNotificationInput!
    id: Int!
  ): WebNotification!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Creates FacilityParkingCancelWaitlist entity row.
  #       Returns created entity row
  #
  createFacilityParkingCancelWaitList(
    toDate: DateString!
    fromDate: DateString!
    facilityParkingId: Int!
    bookingId: Int!
  ): FacilityParkingCancelWaitlist!

  #
  #       [AUTH_RULE]: [StaffOrClientAuthorized]
  #       Cancels FacilityParkingCancelWaitlist entity row.
  #       Returns cancelled entity row
  #
  cancelFacilityParkingCancelWaitList(
    facilityParkingWaitlistId: Int!
  ): FacilityParkingCancelWaitlist!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns generated .csv file for BookingTicketType entity row by id
  #
  bookingTicketCsv(id: String!): CsvReportResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns clients info as a .csv file
  #
  clientListCsv(clientIds: [Int!]!): CsvReportResult!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Sends a letter to the client to verify an email
  #
  submitEmailClientVerification(email: String!): Boolean!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Verifies client token
  #
  submitTokenInfoClient(
    memberId: String!
    birthday: DateString!
    tel: String!
    token: String!
    password: String!
  ): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns the URL of the generated files associated with a facility revenue report
  #
  facilityRevenueReportCsv(
    fromDate: DateString!
    toDate: DateString!
    facilityId: Int!
  ): CsvReportResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates ClientCommentLike entity row (likes a client comment) by comment id
  #
  likeClientComment(commentId: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes ClientCommentLike entity row (unlikes a client comment) by comment id
  #
  unlikeClientComment(commentId: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates a charge for client.
  #       Returns created ClientCharge entity row
  #
  createClientCharge(data: CreateClientChargeInput!): ClientCharge!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates PointExchange entity rows
  #
  createPointExchange(
    clientId: Int!
    orders: [CreatePointExchangeOrderInput!]!
    contractId: Int
    address: CreatePointExchangeAddressInput
  ): Boolean!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Creates PointExchange entity rows for current client
  #
  createMyPointExchange(
    orders: [CreatePointExchangeOrderInput!]!
    contractId: Int
    address: CreatePointExchangeAddressInput
  ): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Creates TVPHistory entity row.
  #       Returns created entity row
  #
  changeTVP(remarks: String, pointChange: Int!, clientId: Int!): TVPHistory!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates Contract entity row by id.
  #       Returns created entity row
  #
  updateContract(data: UpdateContractInput!, contractId: Int!): Contract!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Updates VS Contract entity row's auto renewal property.
  #       Returns updated entity row
  #
  updateVsAutoRenewal(autoRenewal: Boolean!, contractId: Int!): Contract!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Deletes tentative Contract entity row.
  #       Returns deleted entity row
  #
  deleteTentativeContract(id: Int!): Contract!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Transfer's contract to another client by id.
  #
  transferContract(
    reason: TransferContractReason!
    toClientId: Int!
    contractId: Int!
  ): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Terminates specified contract by id
  #
  terminateContract(
    contractId: Int!
    reason: TerminateContractReason!
    refundAmount: Int
  ): Boolean!

  #
  #       [AUTH_RULE]: [ClientAuthorized]
  #       Creates ClientReferenceRequest entity row for future client reference
  #
  referFutureClient(name: String!, kana: String!, tel: String!): Boolean!

  #
  #       [AUTH_RULE]: [NoAuthentication]
  #       Makes PointExchange entity row confirmed by id and code
  #
  confirmReceiveOfPointExchange(code: String!, id: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Revokes MwRight entity row as RCI by id
  #
  revokeMwRightForRCI(id: Int!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns the URL of the generated files associated with PMS report
  #
  pmsCsvReport(
    type: PmsReportType!
    facilityId: Int
    fromDate: DateString!
    toDate: DateString!
  ): CsvReportResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns the URL of the generated files associated with a general CRM report
  #
  crmGeneralReport(
    generalType: CrmGeneralReportType!
    fromDate: DateString!
    toDate: DateString!
  ): CsvReportResult!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Returns the URL of the generated files associated with a accounting CRM report
  #
  crmAccountingReport(
    accountingType: CrmAccountingReportType!
    fromDate: DateString!
    toDate: DateString!
  ): CsvReportResult!

  #
  #       Migrates facilities, room types and rooms from .csv files
  #
  migrateAllViaCsv(
    facilitiesFile: CSV!
    roomTypesFile: CSV!
    roomsFile: CSV!
    password: String!
  ): Boolean!

  #
  #       Migrates facilities from .csv file
  #
  migrateFacilities(file: CSV!, password: String!): Boolean!

  #
  #       Migrates room types from .csv file
  #
  migrateRoomTypes(file: CSV!, password: String!): Boolean!

  #
  #       Migrates rooms from .csv file
  #
  migrateRooms(file: CSV!, password: String!): Boolean!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates FacilityParkingCancelWaitlist entity row with specified data by id.
  #       Returns updated entity row
  #
  updateFacilityParkingCancelWaitList: FacilityParkingCancelWaitlist!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Removes BookingPlan entity row and it's related bookings and BookingPlanCharge entity rows.
  #       Returns removed BookingPlan entity row
  #
  deleteBookingPlan(id: Int!): BookingPlan!

  #
  #       [AUTH_RULE]: [StaffAuthorized]
  #       Updates a ClientCharge entity row by id.
  #       Returns updated ClientCharge entity row
  #
  updateClientCharge(showMember: Boolean!, id: Int!): ClientCharge!
}

input CreateStaffRoleInput {
  name: String!
}

input CreateStaffRolePermissionInput {
  key: String
}

input UpdateStaffRoleInput {
  name: String
  readPermissionKeys: [String!]
  writePermissionKeys: [String!]
}

input UpdateStaffRolePermissionInput {
  key: String
}

input UpdateStaffInput {
  roleId: Int
  name: String
  nameAbbr: String
  facilityId: Int
  email: String
  crmRep: Boolean!
  profileImgUrl: String
  disabled: Boolean
}

input CreateStaffInput {
  roleId: Int!
  name: String!
  nameAbbr: String
  email: String!
  facilityId: Int
  crmRep: Boolean!
  profileImgUrl: String
}

input UpdateFacilityInput {
  name: String
  nameRoma: String
  nameAbbr: String
  nameOfficial: String
  postalCode: String
  address1: String
  address2: String
  tel: String
  fax: String
  email: String
  opened: DateString
  bedShareRule: BedShareRule
  floorPlanPdf: String
  spSetupFee: Int
  mwCleaningFee: Int
  rakutsuHotelCode: String
  order: Int
}

input UpdatePublicFacilityInfoInput {
  facilityHpUrl: String
  nameWeb: String
  tags: [String!]
  mainImageUrl: String
  otherNotes: String
  nameAbbr: String
  roomTypes: [UpdatePublicRoomTypesInput!]
}

input UpdatePublicRoomTypesInput {
  id: Int!
  bookingRemarks: String
}

input CreateFacilityInput {
  name: String!
  nameRoma: String
  nameAbbr: String
  nameOfficial: String
  type: FacilityTypeEnum!
  postalCode: String
  address1: String
  address2: String
  tel: String
  fax: String
  email: String
  opened: DateString
  bedShareRule: BedShareRule
  spSetupFee: Int
  mwCleaningFee: Int
}

input UpdateDepartmentInput {
  name: String
}

input CreateDepartmentInput {
  name: String!
}

type StaffToken {
  id: Int!
  staffId: Int!
  staff: Staff!
  token: String!
  code: String
}

input ConfirmEmailStaffInput {
  token: String!
  password: String!
}

type StaffRequestMfaResponse {
  validUntil: DateTimeIso!
  type: StaffRequestMfaResponseType!
  token: String!
}

enum StaffRequestMfaResponseType {
  MFA
  ChangePassword
}

type StaffLoginResponse {
  refreshToken: String!
  accessToken: String!
  staff: Staff!
  role: String!
  rolePermissions: [StaffLoginResponseRolePermission!]!
  forcePasswordChangeRequired: Boolean!
}

type StaffLoginResponseRolePermission {
  permission: String!
  action: RolePermissionLevel!
}

enum RolePermissionLevel {
  Read
  Write
}

type StaffRequestResetPasswordResponse {
  validUntil: DateTimeIso!
  token: String!
  sentEmail: String!
}

input UpdateContactInput {
  type: ClientContactType!
  labelName: String
  postalCode: String
  prefecture: String
  locality: String
  address1: String
  address2: String
  tel: String
  fax: String
  email: String
  mobile: String
}

input UpdateClientInput {
  isCompany: Boolean
  companyName: String
  companyNameKana: String
  companyRepresentativeName: String
  companyRepresentativeKana: String
  companyPicName: String
  companyPicKana: String
  companyPicDepartment: String
  companyPicTitle: String
  lastName: String
  lastKana: String
  lastNameRoma: String
  firstName: String
  firstKana: String
  firstNameRoma: String
  sex: Gender
  birthday: DateString
  income: Int
  employmentTypeId: Int
  employerName: String
  employerKana: String
  businessTypeId: Int
  businessTypeOther: String
  businessEst: DateString
  area: String
  mailPreference: ClientContactType
  telPreference: ClientContactType
  tokyuGroupId: Int
  picId: Int
  referralCode: String
  usedReferralCode: String
  firstAccessDate: DateString
  remarks: String
  claimer: Boolean
  memberId: String
  membershipFee: Int
  membershipChargeMonth: Int
  topCardNumber: String
  topMember: Boolean
  emailMagazine: Boolean
  memberRemarks: String
  memberCardIssued: DateTime
  requestMail: Boolean
  memberDisabled: DateTime
  frozenAt: DateTime
  frozenReason: String
  facilityFeePayment: FeePaymentType
  setupFeePayment: FeePaymentType
  optionalCleaningPayment: FeePaymentType
  taxPayment: FeePaymentType
  otherServicePayment: FeePaymentType
  duplicated: Boolean
  email: String
  companySize: Int
  lastResponseDate: DateString
  type: ClientType
  seasonsInterested: [String!]
  facilitiesInterested: [String!]
  purchaseRateId: Int
  furtherPurchaseRateId: Int
  renewPurchaseRateId: Int
  negotiationExitReason: String
  gmoRegistered: Boolean
  spFirstDate: DateString
  spPointPrice: Int
  firstContactAge: Int
  incomeLevelId: Int
  remarksForStaff: String
  tbosClientId: Int
  referrerClientId: Int
  referrerGroupEmployeeName: String
  membershipCancellationDate: DateString
  membershipCancellationReason: String
  doNotContact: Boolean
  lastMeetDate: DateString
  lastMeetMethod: String
  lastMeetAttendant: String
  requestMemberMagazineMail: Boolean
  requestBrochureMail: Boolean
  childTypeId: Int
  membershipStarted: DateString
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

input MainUserInput {
  email: String
}

input ClientInfoInput {
  requestMemberMagazineMail: Boolean
  requestBrochureMail: Boolean
  facilityFeePayment: FeePaymentType
  setupFeePayment: FeePaymentType
  optionalCleaningPayment: FeePaymentType
  taxPayment: FeePaymentType
  otherServicePayment: FeePaymentType
}

input SubMemberInput {
  id: Int!
  name: String
  nameKana: String
  birthday: DateString
  relationshipId: Int
  sex: Gender
  postalCode: String
  prefecture: String
  locality: String
  address1: String
  address2: String
  tel: String
  email: String
  loginEmail: String
  remarks: String
}

type ClientRequestMfaResponse {
  validUntil: DateTimeIso!
  type: ClientRequestMfaResponseType!
  token: String!
}

enum ClientRequestMfaResponseType {
  MFA
  ChangePassword
}

type ClientLoginResponse {
  refreshToken: String!
  accessToken: String!
  memberUserId: Int!
  forcePasswordChangeRequired: Boolean!
  role: ClientRole!
}

enum ClientRole {
  Main
  Sub
  Family
}

type MemberUserToken {
  id: Int!
  memberUserId: Int!
  memberUser: MemberUser!
  token: String!
  code: String
  vsIntent: Boolean!
}

input ConfirmEmailClientInput {
  token: String!
  password: String!
}

type ClientRequestResetPasswordResponse {
  validUntil: DateTimeIso!
  token: String!
  sentEmail: String!
}

type StaffRolePermissionLevel {
  id: Int!
  staffRoleId: Int!
  staffRole: StaffRole!
  staffRolePermissionId: Int!
  staffRolePermission: StaffRolePermission!
  permissionLevel: RolePermissionLevel!
}

input CreateStaffRolePermissionLevelInput {
  roleId: Int!
  rolePermissionId: Int!
  permissionLevel: RolePermissionLevel!
}

input CreateRoomTypeInput {
  name: String!
  facilityId: Int!
  maxOccupancy: Int = 4
  bedShareMaxOccupancy: Int
  backgroundColor: String
  foreColor: String
  order: Int = 0
}

input UpdateRoomTypeInput {
  name: String
  facilityId: ID
  maxOccupancy: Int
  bedShareMaxOccupancy: Int
  backgroundColor: String
  foreColor: String
  order: Int
  rakutsuId: String
}

input CreateRoomInput {
  name: String!
  roomTypeId: Int!
  order: Int = 0
}

input UpdateRoomInput {
  name: String
  roomTypeId: ID
  order: Int
}

input UpdateRentalItemInput {
  quantity: Int!
  rentalItemDefId: Int!
}

input CreateRentalItemInput {
  facilityId: Int!
  rentalItemDefId: Int!
  quantity: Int!
}

input UpdateSaleItemInput {
  price: Int!
  allowPriceOverwrite: Boolean!
  forSale: Boolean = true
}

input CreateFacilityParkingInput {
  facilityId: Int!
  name: String!
  maxHeight: Int
  quantity: Int!
  allowCancelWait: Boolean = false
}

input UpdateFacilityParkingInput {
  name: String!
  maxHeight: Int
  quantity: Int!
  allowCancelWait: Boolean!
}

type FacilityHotelTax {
  id: Int!
  facilityId: Int!
  facility: Facility!
  effectiveFrom: DateString!
}

input UpdateFacilityHotelTaxInput {
  effectiveFrom: DateString!
}

input CreateFacilityHotelTaxInput {
  facilityId: Int!
  effectiveFrom: DateString!
}

type FacilityHotelTaxAmount {
  id: Int!
  facilityHotelTaxId: Int!
  facilityHotelTax: FacilityHotelTax!
  priceFrom: Int!
  taxAmount: Int!
}

input UpdateFacilityHotelTaxAmountInput {
  priceFrom: Int!
  taxAmount: Int!
}

input CreateFacilityHotelTaxAmountInput {
  facilityHotelTaxId: Int!
  priceFrom: Int!
  taxAmount: Int!
}

input UpdateSubMemberInput {
  subMemberTypeId: Int
  name: String
  nameKana: String
  birthday: DateString
  sex: Gender
  relationshipId: Int
  postalCode: String
  prefecture: String
  locality: String
  address1: String
  address2: String
  tel: String
  email: String
  remarks: String
}

input BaseInfoMySubMemberCreateInput {
  name: String!
  nameKana: String!
  birthday: DateString!
  sex: Gender!
  relationshipId: Int!
  postalCode: String!
  prefecture: String!
  locality: String!
  address1: String!
  address2: String
  tel: String!
  email: String!
}

input MemberUserMyCreateInput {
  email: String!
  password: String!
}

input CreateSubMemberInput {
  subMemberTypeId: Int!
  name: String
  nameKana: String
  birthday: DateString
  sex: Gender
  relationshipId: Int
  postalCode: String
  prefecture: String
  locality: String
  address1: String
  address2: String
  tel: String
  email: String
  loginEmail: String
  remarks: String
}

input UpdateClientContactInput {
  type: ClientContactType
  labelName: String
  postalCode: String
  prefecture: String
  locality: String
  address1: String
  address2: String
  tel: String
  fax: String
  email: String
  mobile: String
}

input CreateClientContactInput {
  clientId: Int!
  type: ClientContactType!
  labelName: String
  postalCode: String
  prefecture: String
  locality: String
  address1: String
  address2: String
  tel: String
  fax: String
  email: String
  mobile: String
}

type UpdateInventoryResult {
  updated: Int!
}

input UpdateInventoryInput {
  inventoryTypeFrom: Int = 1
  inventoryTypeTo: Int!
  rooms: Int!
  roomTypes: [Int!]!
  dateFrom: DateString!
  dateTo: DateString!
  daysOfWeek: [Int!]!
}

input ChangeFromInventoryInput {
  roomTypeId: Int!
  date: DateString!
  inventoryTypeId: Int!
}

enum ProductTypeId {
  MW
  SP
  FP
  VS
  VM
  PW
}

input BookingDayInput {
  inventoryTypeId: Int = 1
}

input AddReservationFacilityParkingInput {
  parkingId: Int!
  fromDate: DateString!
  toDate: DateString!
  carNumber: String
  color: String
  height: Int
}

input CreateTemporaryBookingRoomInput {
  numberOfAdults: Int!
  numberOfChildren: Int!
  numberOfChildrenWithBedShare: Int!
}

type PriceCalculationResultForClient {
  pricesByDay: [PriceCalculationPriceByDayForClient!]!
}

type PriceCalculationPriceByDayForClient {
  date: String!
  accommodationFee: Int!
  fees: [PriceCalculationPriceFee!]!
}

type AccommodationPriceUploadCsvResult {
  scheduled: Boolean!
  scheduledData: [AccommodationPriceTemp!]!
  data: [AccommodationPrice!]!
}

type AccommodationPriceTemp {
  stayDate: DateString!
  spPoint: Int
  fpPoint: Int
  vsPrice1: Int
  vsPrice2: Int
  vsPrice3: Int
  vsPrice4: Int
  vsPrice5: Int
  vsPrice6: Int
  vsPrice7: Int
  vsPrice8: Int
  vsPrice9: Int
  vsPrice10: Int
  vmPrice1: Int
  vmPrice2: Int
  vmPrice3: Int
  vmPrice4: Int
  vmPrice5: Int
  vmPrice6: Int
  vmPrice7: Int
  vmPrice8: Int
  vmPrice9: Int
  vmPrice10: Int
  dpPrice: Int
  id: Int!
  roomTypeId: Int!
  roomType: RoomType!
  accommodationPriceImportId: Int
  accommodationPriceImport: AccommodationPriceImport!
}

input AccommodationPricesCSVUploadInput {
  file: CSV!
  scheduledAt: DateTime
  authorizedBy: String
  remarks: String
}

# CSV upload type
scalar CSV

input UpdateAccommodationPriceInput {
  changeType: AccommodationPriceChangeType!
  change: Int!
  targetPriceTypes: UpdateAccommodationPriceTargetPricesInput!
  fraction: AccommodationPriceFraction!
  targetRoomTypeIds: [Int!]!
  dateFrom: DateString!
  dateTo: DateString!
  dayOfWeek: [Int!]!
}

enum AccommodationPriceChangeType {
  Percent
  Fixed
}

input UpdateAccommodationPriceTargetPricesInput {
  dp: Boolean = false
  sp: Boolean = false
  fp: Boolean = false
  vs1: Boolean = false
  vs2: Boolean = false
  vs3: Boolean = false
  vs4: Boolean = false
  vs5: Boolean = false
  vs6: Boolean = false
  vs7: Boolean = false
  vs8: Boolean = false
  vs9: Boolean = false
  vs10: Boolean = false
  vm1: Boolean = false
  vm2: Boolean = false
  vm3: Boolean = false
  vm4: Boolean = false
  vm5: Boolean = false
  vm6: Boolean = false
  vm7: Boolean = false
  vm8: Boolean = false
  vm9: Boolean = false
  vm10: Boolean = false
}

enum AccommodationPriceFraction {
  Ceil
  Floor
  Round
}

input UpdateAccommodationPriceCellsInput {
  stayDate: DateString!
  roomTypeId: Int!
  priceColumn: AccommodationPriceColumn!
}

enum AccommodationPriceColumn {
  dp
  sp
  fp
  vs1
  vs2
  vs3
  vs4
  vs5
  vs6
  vs7
  vs8
  vs9
  vs10
  vm1
  vm2
  vm3
  vm4
  vm5
  vm6
  vm7
  vm8
  vm9
  vm10
}

type ContractPointOperationResult {
  receipt: Receipt
}

input FacilityParkingReservationBlockInput {
  facilityParkingId: Int!
  fromDate: DateString!
  toDate: DateString!
  note: String!
  parkingNumber: Int
}

input UpdateFacilityParkingWaitListInputCombined {
  facilityParkingWaitlistId: Int!
  data: UpdateFacilityParkingWaitListInput!
}

input UpdateFacilityParkingWaitListInput {
  fromDate: DateString
  toDate: DateString
  facilityParkingId: Int
}

input UpdateFacilityParkingReservationInput {
  facilityParkingReservationId: Int!
  fromDate: DateString
  toDate: DateString
  note: String
  parkingNumber: Int
  carNumber: String
  height: Int
  color: String
  facilityParkingId: Int
}

input UpdateMyFacilityParkingReservationInput {
  id: Int
  facilityParkingId: Int!
  fromDate: DateString!
  toDate: DateString!
  carNumber: String
  color: String
  height: Int
  toWaitList: Boolean
}

input AddReservationRentalItemInput {
  rentalItemId: Int!
  fromDate: DateString!
  toDate: DateString!
  quantity: Int!
}

input UpdateReservationRentalItemInput {
  rentalItemReservationId: Int!
  newFromDate: DateString
  newToDate: DateString
  newQuantity: Int!
}

input UpdateMyRentalItemInput {
  id: Int
  rentalItemId: Int!
  fromDate: DateString!
  toDate: DateString!
  quantity: Int!
}

input CreateBookingPlanInput {
  enabled: Boolean!
  title: String!
  subtitle: String!
  description: String
  remarks: String
  targetBookingType: TargetBookingType!
  roomTypeId: Int!
  publicImagesUrlData: BookingPlanPublicImagesUrlInput
  questions: [BookingPlanQuestionInput!]!
  additionalChargeType: BookingPlanAdditionalChargeType!
  fixedAdditionalCharge: Int!
  fixedAdditionalChargeChild: Int!
  stopSaleDay: Int!

  # Eg.: 08:00:00
  stopSaleTime: String!
  availableFromDate: DateString!
  availableToDate: DateString!
  exceptionFromDate: DateString
  exceptionToDate: DateString
  availableWeekDays: CreateBookingPlanAvailableWeekDaysInput!
  bookThroughDays: Int!
  webPublicFromDate: DateString!
  webPublicToDate: DateString!
  bookingFromDate: DateString!
  bookingToDate: DateString!
  guestCountLimit: Int!
  roomCountLimit: Int!
  discountData: BookingPlanDiscountInput!
  minGuestCount: Int!
  maxGuestCount: Int!
  minDays: Int!
  maxDays: Int!
  penaltyData: BookingPlanPenaltyInput!
  createdByName: String!
  csvFileS3Key: String
}

input BookingPlanPublicImagesUrlInput {
  imagePublicUrl1: String
  imagePublicUrl2: String
}

input BookingPlanQuestionInput {
  text: String
  type: BookingPlanQuestionType!
  required: Boolean = false
  questionSelects: [BookingPlanQuestionSelectInput!]!
}

input BookingPlanQuestionSelectInput {
  title: String!
}

input CreateBookingPlanAvailableWeekDaysInput {
  availableSunday: Boolean!
  availableMonday: Boolean!
  availableTuesday: Boolean!
  availableWednesday: Boolean!
  availableThursday: Boolean!
  availableFriday: Boolean!
  availableSaturday: Boolean!
}

input BookingPlanDiscountInput {
  type: BookingPlanDiscountType!
  day1Discount: Int!
  day2Discount: Int!
  day3Discount: Int!
  day4Discount: Int!
  day5Discount: Int!
  day6Discount: Int!
  day7Discount: Int!
  day8Discount: Int!
  day9Discount: Int!
  continueDiscountAfterDay9: Boolean!
}

input BookingPlanPenaltyInput {
  # whether overrides the default cancel policy
  overrideCancelPolicy: Boolean!

  # From 0 to 1
  noShowPenalty: Float

  # From 0 to 1
  day0Penalty: Float

  # From 1
  threshold1Day: Int

  # From 0 to 1
  threshold1Penalty: Float

  # From 1, more than threshold1Day
  threshold2Day: Int

  # From 0 to 1
  threshold2Penalty: Float

  # From 1, more than threshold2Day
  threshold3Day: Int

  # From 0 to 1
  threshold3Penalty: Float

  # From 1, more than threshold3Day
  threshold4Day: Int

  # From 0 to 1
  threshold4Penalty: Float

  # From 1, more than threshold4Day
  threshold5Day: Int

  # From 0 to 1
  threshold5Penalty: Float

  # From 1, more than threshold5Day
  threshold6Day: Int

  # From 0 to 1
  threshold6Penalty: Float

  # From 1, more than threshold6Day
  threshold7Day: Int

  # From 0 to 1
  threshold7Penalty: Float
}

input CreateRentalItemDefInput {
  name: String!
  rentalPeriod: RentalPeriod!
  price: Int!
}

input UpdateRentalItemDefInput {
  name: String!
  rentalPeriod: RentalPeriod!
  price: Int!
}

input UseBookingTicketInput {
  representativeName: String
  representativeKana: String
  representativeTel: String
  representativeEmail: String
  representativeCountry: String
  representativePostalCode: String
  representativePrefecture: String
  representativeAddress1: String
  representativeAddress2: String
  bookingGroupId: Int
  numberOfAdults: Int = 0
  numberOfChildren: Int = 0
  numberOfChildrenWithBedShare: Int = 0
  roomTypeId: Int!
  checkInDate: DateString!

  # The length of days must be 1. 1 ticket = 1 day.
  days: [BookingTicketDayInput!]!
  ticketId: String!
  parkings: [AddReservationFacilityParkingInput!]!
  force: Boolean = false
}

input BookingTicketDayInput {
  inventoryTypeId: Int!
}

input BookingTicketRegisterEmailInput {
  ticketNo: String!
  secret: String!
  email: String!
}

input CreateBookingTicketInput {
  name: String!
  intendedClientId: Int
  availableFromDate: DateString!
  availableToDate: DateString!
  bookCallCenter: Boolean!
  bookSalesRep: Boolean!
  availableSunday: Boolean!
  availableMonday: Boolean!
  availableTuesday: Boolean!
  availableWednesday: Boolean!
  availableThursday: Boolean!
  availableFriday: Boolean!
  availableSaturday: Boolean!
  availableHoliday: Boolean!
  nightwear: Boolean!
  toothbrush: Boolean!
  razor: Boolean!
  rentalItem: Boolean!
  accommodationPrice: Int!
  cancelDeadline: Int!
  bookingFromDate: DateString!
  bookingFromDays: Int!
  assetValue: Int!
  notes: String
  targetRoomTypeIds: [Int!]!
  numberOfTickets: Int!
  exceptionDates: [DateString!]!
}

type GenerateUploadUrlResult {
  uploadUrl: String!
  fileUrl: String!
  key: String!
  public: Boolean!
}

enum ClientAllowedUploadType {
  Passport
}

input UpdateBookingPlanInput {
  enabled: Boolean
  title: String
  subtitle: String
  description: String
  remarks: String
  targetBookingType: TargetBookingType
  roomTypeId: Int
  publicImagesUrlData: BookingPlanPublicImagesUrlInput
  questions: [BookingPlanQuestionInput!]
  additionalChargeType: BookingPlanAdditionalChargeType
  fixedAdditionalCharge: Int
  fixedAdditionalChargeChild: Int
  stopSaleDay: Int

  # Eg.: 08:00:00
  stopSaleTime: String
  availableFromDate: DateString
  availableToDate: DateString
  exceptionFromDate: DateString
  exceptionToDate: DateString
  availableWeekDays: CreateBookingPlanAvailableWeekDaysInput
  bookThroughDays: Int
  webPublicFromDate: DateString
  webPublicToDate: DateString
  bookingFromDate: DateString
  bookingToDate: DateString
  guestCountLimit: Int
  roomCountLimit: Int
  discountData: BookingPlanDiscountInput
  minGuestCount: Int
  maxGuestCount: Int
  minDays: Int
  maxDays: Int
  penaltyData: BookingPlanPenaltyInput
  createdByName: String
  csvFileS3Key: String
}

input MyBookingPreCheckInFilterInput {
  guestId: Int!
  address1: String
  occupation: String
  age: Int
  sex: Gender
  tel: String
  email: String
  nationality: String
  passportNumber: String
  passportPhoto: String
}

type DepositRightsResult {
  mwRights: [MwRight!]!
  bookingAccommodationPrices: [BookingAccommodationPrice!]!
  booking: Booking
}

type ExchangeDepositedRightsResult {
  mwRights: [MwRight!]!
  bookingAccommodationPrices: [BookingAccommodationPrice!]!
  booking: Booking!
}

input ExchangeDepositedRightInput {
  contractId: Int!
  year: Int!
  firstHalf: Boolean!
  latterHalf: Boolean!
  bookYear: Int!
  bookWeekNo: Int!
  roomTypeId: Int!
  allowUpgrade: Boolean!
  force: Boolean!
  bookingBarNote: String
  numberOfAdults: Int = 1
  numberOfChildren: Int = 0
  numberOfChildrenWithBedShare: Int = 0
  representativeClientId: Int
  representativeSubMemberId: Int
  representativeName: String
  representativeKana: String
  representativeTel: String
  representativeEmail: String
  representativeCountry: String
  representativePostalCode: String
  representativePrefecture: String
  representativeAddress1: String
  representativeAddress2: String
  exchangeFeeOverride: Int
}

input SplitMwRightInput {
  contractId: Int!
  bookingGroupId: Int!
  bookings: [SplitMwRightBookingInput!]!
}

input SplitMwRightBookingInput {
  checkInDate: DateString!
  representativeName: String!
  representativeClientId: Int
  representativeSubMemberId: Int
}

type BookingCancellationResult {
  # Cancelled booking
  booking: Booking!
  penalties: [BookingCancellationPenalty!]!

  # New created bookings according to the stay date at penalty rates. Used for PW and VM
  newBookings: [Booking!]
}

input CancelPenaltyRateInput {
  stayDate: DateString!
  penaltyRate: Float!
}

input HolidayInput {
  date: DateString!
  name: String!
}

input CreateBookingInvoiceInput {
  bookingGroupId: Int!
  chargeIds: [Int!]!
  payments: [CreateBookingInvoicePaymentInput!]!
}

input CreateBookingInvoicePaymentInput {
  paymentMethodId: Int!
  amount: Int!
}

input DeleteBookingInvoiceInput {
  bookingInvoiceId: Int!
}

input ConfirmDetailRowFacilityDailyReportInput {
  facilityId: Int!
  reportDate: DateString!
  paymentMethodId: Int!
  check1stName: String!
  check2ndName: String!
  voucher1Amount: Int
  voucher1Count: Int
  voucher2Amount: Int
  voucher2Count: Int
  voucher3Amount: Int
  voucher3Count: Int
  voucher4Amount: Int
  voucher4Count: Int
  voucher5Amount: Int
  voucher5Count: Int
}

input AttachFileDetailRowFacilityDailyReportInput {
  facilityId: Int!
  reportDate: DateString!
  paymentMethodId: Int!
  fileUrl: String!
}

input SubmitTVSFacilityDailyReportInput {
  cash1Count: Int!
  cash5Count: Int!
  cash10Count: Int!
  cash50Count: Int!
  cash100Count: Int!
  cash500Count: Int!
  cash1000Count: Int!
  cash2000Count: Int!
  cash5000Count: Int!
  cash10000Count: Int!
  cashAdjustment: Int!
  cashAdjustmentReason: String
  notes: String
  facilityId: Int!
  reportDate: DateString!
}

input SubmitCNVFacilityDailyReportInput {
  details: [SubmitCNVFacilityDailyReportDetails!]!
  notes: String
  facilityId: Int!
  reportDate: DateString!
}

input SubmitCNVFacilityDailyReportDetails {
  bookingId: Int!
  cleaning: CleaningEnum
  cleaningFeeExempt: FeeExempt
  cleaningFeeExemptAmount: Int
  facilityFeeExempt: FeeExempt
  facilityFeeExemptAmount: Int
  remarks: String
}

input ConfirmRejectReportHqInput {
  facilityDailyReportId: Int!
  status: FacilityDailyReportHQ!
}

enum FacilityDailyReportHQ {
  Confirmed
  Rejected
}

input UpdateTVSFacilityDailyReportInput {
  cash1Count: Int!
  cash5Count: Int!
  cash10Count: Int!
  cash50Count: Int!
  cash100Count: Int!
  cash500Count: Int!
  cash1000Count: Int!
  cash2000Count: Int!
  cash5000Count: Int!
  cash10000Count: Int!
  cashAdjustment: Int!
  cashAdjustmentReason: String
  notes: String
}

input UpdateCNVFacilityDailyReportInput {
  details: [SubmitCNVFacilityDailyReportDetails!]!
  notes: String
}

input BasicUpdateBookingInput {
  bookingId: Int!
  roomId: Int
  mailBookingCertificate: Boolean
  mailFacilityGuide: Boolean
  mailPointCertificate: Boolean
  mailAds: Boolean
  toothbrush: Boolean
  yukata: Boolean
  remarks: String
  representative: BookingGuestInput
  roomFixed: Boolean
  bookingBarNote: String
}

input BookingGuestInput {
  clientId: Int
  subMemberId: Int
  name: String
  kana: String
  age: Int
  sex: Gender
  tel: String
  email: String
  address1: String
  occupation: String
  nationality: String
  passportPhoto: String
  passportNumber: String
}

input BookingGuestWithScheduleInput {
  clientId: Int
  subMemberId: Int
  name: String
  kana: String
  age: Int
  sex: Gender
  tel: String
  email: String
  address1: String
  occupation: String
  nationality: String
  passportPhoto: String
  passportNumber: String
  child: Boolean
  bedShared: Boolean
  schedules: [BookingGuestScheduleInput!]!
}

input BookingGuestScheduleInput {
  stayDate: DateString!
  bathing: Boolean
  stay: Boolean
}

input UpdateMyBookingGuestDataInput {
  name: String!
  kana: String
  child: Boolean!
  bedShared: Boolean!
  address1: String
  occupation: String
  age: Int
  sex: Gender
  tel: String
  email: String
  nationality: String
  passportNumber: String
  passportPhoto: String
}

type AllocateRoomResult {
  newRoom: Room!
  oldRoom: Room!
}

input ConfirmBookingGroupBookingInput {
  id: Int!
  guests: [ConfirmBookingGroupBookingGuestInput!]!
  rentalItems: [ConfirmBookingGroupBookingRentalItemInput!]!
  parkings: [ConfirmBookingGroupBookingParkingInput!]!
  parkingRequestNumber: Int
  petNumber: Int
  petBreed: String
}

input ConfirmBookingGroupBookingGuestInput {
  id: Int!
  name: String!
  address1: String
  occupation: String
  age: Int
  sex: Gender
  tel: String
  email: String
  nationality: String
  passportNumber: String
  passportPhoto: String
}

input ConfirmBookingGroupBookingRentalItemInput {
  rentalItemId: Int!
  fromDate: String!
  toDate: String!
  quantity: Int!
}

input ConfirmBookingGroupBookingParkingInput {
  parkingId: Int!
  fromDate: String!
  toDate: String!
  height: Int
  carNumber: String
  color: String
  toWaitList: Boolean
}

input UpdateMyBookingInput {
  parkingRequestedNumber: Int
}

type BookingInvoiceCreatePdfResponse {
  invoice: BookingInvoice!
  pdfUrl: String!
}

input CreateBookingInvoicePdfInput {
  bookingInvoiceId: Int!
}

input UpdateBookingInvoiceInput {
  bookingInvoiceId: Int!
  addresseeName: String!
  receiptFor: String!
}

input CreateCampaignInput {
  status: CampaignStatus!
  name: String!
  groups: [String!]!
  mediaTypeIds: [Int!]!
  startDate: DateString!
  endDate: DateString!
  budget: Int!
  target20s: Boolean!
  target30s: Boolean!
  target40s: Boolean!
  target50s: Boolean!
  target60s: Boolean!
  target70s: Boolean!
  targetMale: Boolean!
  targetFemale: Boolean!
  purposeRecognition: Boolean!
  purposePersuade: Boolean!
  purposePromote: Boolean!
  methodDm: Boolean!
  methodEmail: Boolean!
  methodBillboard: Boolean!
  methodTv: Boolean!
  methodSns: Boolean!
  methodWeb: Boolean!
  attachment1: String
  attachment2: String
  attachment3: String
  note: String
}

input UpdateCampaignInput {
  status: CampaignStatus
  name: String
  groups: [String!]
  mediaTypeIds: [Int!]
  startDate: DateString
  endDate: DateString
  budget: Int
  target20s: Boolean
  target30s: Boolean
  target40s: Boolean
  target50s: Boolean
  target60s: Boolean
  target70s: Boolean
  targetMale: Boolean
  targetFemale: Boolean
  purposeRecognition: Boolean
  purposePersuade: Boolean
  purposePromote: Boolean
  methodDm: Boolean
  methodEmail: Boolean
  methodBillboard: Boolean
  methodTv: Boolean
  methodSns: Boolean
  methodWeb: Boolean
  attachment1: String
  attachment2: String
  attachment3: String
  note: String
}

input FinalizeBookingInvoiceInput {
  bookingInvoiceId: Int!
  invoiceSendToEmails: [String!]!
}

input WebRequestMediaInput {
  mediaType: String!
  mediaOther: String
}

input WebRequestInput {
  type: WebRequestType!
  memberId: String
  forVm: Boolean
  forVs: Boolean
  isCompany: Boolean
  companyName: String
  companyNameKana: String
  companyPicDepartment: String
  companyPicTitle: String
  companyPicName: String
  companyPicKana: String
  lastName: String
  lastKana: String
  firstName: String
  firstKana: String
  sex: Gender
  birthday: DateString
  tel: String
  telMobile: String
  email: String
  businessTypeId: Int
  businessTypeOther: String
  postalCode: String
  prefecture: String
  locality: String
  address1: String
  address2: String
  firstDate: DateString
  firstTime: String
  secondDate: DateString
  secondTime: String
  otherDateTime: String
  inquiry: String
  firstCheckInDate: DateString
  firstStayDays: Int
  firstFacilityId: Int
  secondCheckInDate: DateString
  secondStayDays: Int
  secondFacilityId: Int
  bookingId: Int
  companySize: Int
  workStyleReform: Boolean
  seasons: [String!]
  facilities: [String!]
}

enum WebRequestStatus {
  Handled
  New
}

input UpdateWebRequestInput {
  remarks: String
  status: WebRequestStatus
  picId: Int
}

input CreateFacilityBookingRemarksInput {
  bookingTypeId: Int!
  remarks: String!
}

input NonProductPricesCSVUploadInput {
  file: CSV!
  nonProductId: Int!
}

input CreateSignupBonusInput {
  status: SignupBonusStatus!
  name: String!
  startDate: DateString!
  endDate: DateString!
  type: SignupBonusType!
  description: String!
  amount: Int
  vsPromoCode: String
  vsPromoDiscount: Int = 0
  vsPromoTVP: Int = 0
}

input UpdateSignupBonusInput {
  status: SignupBonusStatus
  name: String
  startDate: DateString
  endDate: DateString
  type: SignupBonusType
  description: String
  amount: Int
  vsPromoCode: String
  vsPromoDiscount: Int
  vsPromoTVP: Int
}

enum SignupBonusApplicationMarkStatus {
  Handled
  New
}

type VsSignupTokenInfoResult {
  email: String!
  isCompany: Boolean!
}

type VsSignupSubmitFormResult {
  id: Int!
  result: VsSignupSubmitFormResultCode!
  clientId: Int!
}

enum VsSignupSubmitFormResultCode {
  StaffWillContact
  WelcomeEmailSent
}

input SubmitFormVsSignupInput {
  token: String!
  password: String!
  isCompany: Boolean!
  clientCode: String
  individualInfo: SubmitFormIndividualInput
  companyInfo: SubmitFormCompanyInput
  postalCode: String!
  prefecture: String!
  locality: String!
  address1: String!
  address2: String!
  tel: String
  mobile: String
  creditCardToken: String!
  promoCode: String
  contactEmail: String
  media: String
}

input SubmitFormIndividualInput {
  lastName: String!
  firstName: String!
  lastKana: String!
  firstKana: String!
  sex: Gender!
  birthday: DateString!
}

input SubmitFormCompanyInput {
  companyName: String!
  companyNameKana: String!
  companyPicName: String!
  companyPicKana: String!
  companyPicDepartment: String
  companyPicTitle: String
}

input CreateVmBookingInput {
  checkInDate: DateString!
  checkOutDate: DateString!
  days: [VmBookingDayInput!]!
}

input VmBookingDayInput {
  inventoryTypeId: Int!
  stayRightPrice: Int
}

# The `Upload` scalar type represents a file upload.
scalar Upload

input CreateClientActionHistoryInput {
  clientId: Int!
  actionPlannedAt: DateTime
  actionAt: DateString
  participants: [String!]!
  priority: Int
  actionMethodId: Int
  purchaseRateId: Int
  furtherPurchaseRateId: Int
  renewPurchaseRateId: Int
  action: String
  remarks: String
  negotiationExitReason: String
  isComplaint: Boolean = false
  clientActionTypeId: Int
  kujiraCrmId: String
  kujiraCrmTel: String
  kujiraCrmDate: String
}

input UpdateClientActionHistoryInput {
  actionPlannedAt: DateTime
  actionAt: DateString
  participants: [String!]!
  priority: Int
  actionMethodId: Int
  purchaseRateId: Int
  furtherPurchaseRateId: Int
  renewPurchaseRateId: Int
  action: String
  remarks: String
  negotiationExitReason: String
  isComplaint: Boolean
  clientActionTypeId: Int
}

input CreateOtherPublicDocInput {
  docTypeText: String!
  fileName: String!
  url: String!
}

input CreateUserGuideInput {
  year: Int!
  url: String!
}

input CreateVacationLifeInput {
  year: Int!
  month: String!
  url: String!
}

type SuggestClientPicResult {
  webRequest: WebRequest!
  suggestedPic: Staff!
}

input ClientPicAssignmentInput {
  webRequestId: Int!
  picStaffId: Int!
}

type ClientAnnualFeeProcessPaymentResult {
  processedCount: Int!
  errorCount: Int!
}

type CreateClientResult {
  id: Int!
  isCompany: Boolean!
  companyName: String
  companyNameKana: String
  companyRepresentativeName: String
  companyRepresentativeKana: String
  companyPicName: String
  companyPicKana: String
  companyPicDepartment: String
  companyPicTitle: String
  lastName: String
  lastKana: String
  lastNameRoma: String
  firstName: String
  firstKana: String
  firstNameRoma: String
  sex: Gender
  birthday: DateString
  income: Int
  employmentTypeId: Int
  employmentType: EmploymentType
  employerName: String
  employerKana: String
  businessTypeId: Int
  businessType: BusinessType
  businessTypeOther: String
  businessEst: DateString
  area: String
  mailPreference: ClientContactType
  telPreference: ClientContactType
  tokyuGroupId: Int
  tokyuGroup: TokyuGroup
  picId: Int
  pic: Staff
  referralCode: String!
  usedReferralCode: String
  firstAccessDate: DateString
  remarks: String
  claimer: Boolean!
  memberId: String
  membershipStarted: DateString
  membershipFee: Int
  membershipChargeMonth: Int
  topCardNumber: String
  topMember: Boolean!
  emailMagazine: Boolean
  memberRemarks: String
  memberCardIssued: DateTimeIso
  requestMail: Boolean
  memberDisabled: DateTimeIso
  frozenAt: DateTimeIso
  frozenReason: String
  facilityFeePayment: FeePaymentType
  setupFeePayment: FeePaymentType
  optionalCleaningPayment: FeePaymentType
  taxPayment: FeePaymentType
  otherServicePayment: FeePaymentType
  duplicated: Boolean!
  email: String
  companySize: Int
  lastResponseDate: DateString
  type: ClientType!
  seasonsInterested: [String!]
  facilitiesInterested: [String!]
  purchaseRateId: Int
  purchaseRate: PurchaseRate
  furtherPurchaseRateId: Int
  furtherPurchaseRate: PurchaseRate
  renewPurchaseRateId: Int
  renewPurchaseRate: PurchaseRate
  negotiationExitReason: String
  contracts: [Contract!]
  subMembers: [SubMember!]
  contacts: [ClientContact!]
  mainContact: ClientContact
  gmoRegistered: Boolean!
  spFirstDate: DateString
  spPointPrice: Int
  firstContactAge: Int
  incomeLevelId: Int
  incomeLevel: IncomeLevel
  remarksForStaff: String
  tbosClientId: Int
  referrerClientId: Int
  referrerClient: Client
  referrerGroupEmployeeName: String
  membershipCancellationDate: DateString
  membershipCancellationReason: String
  doNotContact: Boolean!
  lastMeetDate: DateString
  lastMeetMethod: String
  lastMeetAttendant: String
  requestMemberMagazineMail: Boolean!
  requestBrochureMail: Boolean!
  childTypeId: Int
  childType: ClientChildType
  createdAt: DateTimeIso!
  name: String!
  nameKana: String!
  campaignApplyResponses: [CampaignApplyResponse!]
  clientActionHistories: [ClientActionHistory!]
  directBookings: [Booking!]
  lastBooking: Booking
  lastCampaignApplyResponse: CampaignApplyResponse
  lastClientActionHistory: ClientActionHistory
  memberUser: MemberUser
  registeredCC: RegisteredCC
  age: Int
  possiblyDuplicated: Boolean!
}

input ManualCreateClientInput {
  isCompany: Boolean = false
  companyName: String
  companyNameKana: String
  postalCode: String
  tel: String
  birthday: DateString
  firstName: String
  firstKana: String
  lastName: String
  lastKana: String
}

input CreateWebNotificationInput {
  title: String!
  body: String!
  imageUrl: String
  showFromDate: DateString!
  showToDate: DateString!
  important: Boolean = false
  published: Boolean = false
}

input UpdateWebNotificationInput {
  title: String!
  body: String!
  imageUrl: String
  showFromDate: DateString!
  showToDate: DateString!
  important: Boolean = false
  published: Boolean = false
}

type FacilityParkingCancelWaitlist {
  id: Int!
  bookingId: Int!
  booking: Booking!
  facilityParkingId: Int!
  facilityParking: FacilityParking!
  fromDate: DateString!
  toDate: DateString!
  notifiedAt: DateTimeIso
  clientId: Int!
  client: Client!
  subMemberId: Int
  subMember: SubMember
  cancelledAt: DateTimeIso
  createdAt: DateTimeIso!
}

input CreateClientChargeInput {
  clientId: Int!
  price: Int!
  clientChargeTypeId: Int!
  paymentMethod: ClientChargePaymentMethod!
  note: String
}

input CreatePointExchangeOrderInput {
  quantity: Int!
  productId: Int!
}

input CreatePointExchangeAddressInput {
  name: String
  tel: String
  email: String
  postalCode: String
  prefecture: String
  locality: String
  address1: String!
  address2: String
}

input UpdateContractInput {
  startDate: DateString
  endDate: DateString
  years: Int
  autoRenewal: Boolean
  basePoint: Int
  pointPrice: Int
  additionalPointPrice: Int
  mwExchangeFee: Int
  campaignId: Int
  spFirstDate: DateString
  totalPoint: Int
  loginAllowedDate: DateString
  phaseId: Int
  remarks: String
  responseSource: String
  contractPurchaseTypeId: Int
  contractPurchaseTypeDetailId: Int
  salesStaffId: Int
  purchaseReason: String
  mainPurchasePurposeId: Int
  subPurchasePurposeId: Int
  applicationDate: DateString
  applicationTypeId: Int
  paymentExpectedDate: DateString
  paymentDate: DateString
  entranceFee: Int
  entranceFeeTax: Int
  memberRegistrationFee: Int
  memberRegistrationFeeTax: Int
  annualFee: Int
  annualFeeTax: Int
  managementFee: Int
  managementFeeTax: Int
  hotspringFee: Int
  hotspringFeeTax: Int
  paymentTotal: Int
  paymentTotalWithTax: Int
  paymentTotalTax: Int
  entranceFeeDiscount: Int
  entranceFeeDiscountTax: Int
  purchasePaymentMethodId: Int
  receivedPayment: Int
  receivedPaymentDifference: Int
  accountingCheck: String
}

enum TransferContractReason {
  Inherit
  Transfer
}

enum TerminateContractReason {
  Terminate
  Recreate
}

enum PmsReportType {
  DailyReport
  BookReport
  CancelReport
  WaitListReport
  RentalItemReport
  CreditCardPaymentSummaryReport
}

enum CrmGeneralReportType {
  FacilityOccupancyRate
  ExpectedContractList
  CampaignSummary
  CampaignList
  CampaignDetail
  MonthlyContracts
  NegotiationExitReason
  MonthlyTrialStay
  ContractByFaceToFace
  SignupBonusSummary
  FacilitiesInterested
  MembershipTermination
  ProductUsage
  ContractTermination
}

enum CrmAccountingReportType {
  TOPInvoiceData
  SPAccountingReport
  FPAccountingReport
  MWAccountingReport
  BookingTicketAccountingReport
  VMAccountingReport
  TVPAccountingReport
  RemainingPointReport
  RemainingTicketReport
  RemainingTVPReport
}
